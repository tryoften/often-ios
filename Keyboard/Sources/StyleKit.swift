//
//  StyleKit.swift
//  Often
//
//  Created by Luc Succes on 8/10/15.
//  Copyright (c) 2015 Project Surf Inc. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Drawing Methods

    public class func drawBackspace(#color: UIColor, keySize: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Frames
        let frame = CGRectMake(keySize.origin.x, keySize.origin.y, keySize.size.width, keySize.size.height)


        //// Icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.14286 * frame.width, frame.minY + 0.20000 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)

        CGContextSetBlendMode(context, kCGBlendModeMultiply)
        CGContextBeginTransparencyLayer(context, nil)


        //// arrow-icon
        //// head Drawing
        var headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(22.95, 33.31))
        headPath.addLineToPoint(CGPointMake(9.75, 20.28))
        headPath.addLineToPoint(CGPointMake(22.6, 7.97))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()


        //// tail Drawing
        var tailPath = UIBezierPath()
        tailPath.moveToPoint(CGPointMake(9.71, 20.43))
        tailPath.addLineToPoint(CGPointMake(47.94, 20.4))
        tailPath.miterLimit = 4;

        tailPath.usesEvenOddFillRule = true;

        color.setStroke()
        tailPath.lineWidth = 3
        tailPath.stroke()




        //// Bar Drawing
        let barPath = UIBezierPath(rect: CGRectMake(0, 0, 3, 40))
        color.setFill()
        barPath.fill()


        CGContextEndTransparencyLayer(context)

        CGContextRestoreGState(context)
    }

    public class func drawArrowup(#color: UIColor, keySize: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Frames
        let frame = CGRectMake(keySize.origin.x, keySize.origin.y, keySize.size.width, keySize.size.height)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 17, frame.minY + 17.27)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// head Drawing
        var headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(-12.67, -5.88))
        headPath.addLineToPoint(CGPointMake(0.36, -19.07))
        headPath.addLineToPoint(CGPointMake(12.67, -6.22))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()


        //// tail Drawing
        var tailPath = UIBezierPath()
        tailPath.moveToPoint(CGPointMake(0.21, -19.11))
        tailPath.addLineToPoint(CGPointMake(0.24, 19.11))
        tailPath.miterLimit = 4;

        tailPath.usesEvenOddFillRule = true;

        color.setStroke()
        tailPath.lineWidth = 3
        tailPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawSearch(#frame: CGRect, color: UIColor, scale: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// search
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 11.97, frame.maxY - 13.42)
        CGContextScaleCTM(context, scale, scale)



        //// Path-82 Drawing
        var path82Path = UIBezierPath()
        path82Path.moveToPoint(CGPointMake(4.81, 4.54))
        path82Path.addLineToPoint(CGPointMake(13.97, 15.58))
        path82Path.miterLimit = 4;

        path82Path.usesEvenOddFillRule = true;

        color.setStroke()
        path82Path.lineWidth = 3
        path82Path.stroke()


        //// Oval-77 Drawing
        var oval77Path = UIBezierPath(ovalInRect: CGRectMake(-13.97, -15.58, 23, 22))
        color.setStroke()
        oval77Path.lineWidth = 3
        oval77Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawArrowheadup(#frame: CGRect, color: UIColor, borderWidth: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// head Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48860 * frame.width, frame.minY + 0.47676 * frame.height)

        var headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(-10.9, 5.31))
        headPath.addLineToPoint(CGPointMake(-0, -5.31))
        headPath.addLineToPoint(CGPointMake(10.9, 5.29))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = borderWidth
        headPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawShare(#frame: CGRect, color: UIColor) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// share
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.37612 * frame.width, frame.minY + 0.29439 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// square Drawing
        var squarePath = UIBezierPath()
        squarePath.moveToPoint(CGPointMake(7.79, 15.53))
        squarePath.addLineToPoint(CGPointMake(15.39, 15.45))
        squarePath.addLineToPoint(CGPointMake(15.39, 30.11))
        squarePath.addLineToPoint(CGPointMake(0.73, 30.11))
        squarePath.addLineToPoint(CGPointMake(0.73, 15.45))
        squarePath.addLineToPoint(CGPointMake(7.79, 15.53))
        squarePath.closePath()
        squarePath.miterLimit = 4;

        squarePath.usesEvenOddFillRule = true;

        color.setStroke()
        squarePath.lineWidth = 3
        squarePath.stroke()


        //// line Drawing
        var linePath = UIBezierPath()
        linePath.moveToPoint(CGPointMake(8.08, 1.15))
        linePath.addLineToPoint(CGPointMake(8.01, 15.97))
        linePath.miterLimit = 4;

        linePath.usesEvenOddFillRule = true;

        color.setStroke()
        linePath.lineWidth = 3
        linePath.stroke()


        //// head Drawing
        var headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(0, 8.08))
        headPath.addLineToPoint(CGPointMake(7.99, 0))
        headPath.addLineToPoint(CGPointMake(15.98, 8.07))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawCanvas1() {
    }

    //// Generated Images

    public class func imageOfBackspace(#color: UIColor, keySize: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawBackspace(color: color, keySize: keySize)

        let imageOfBackspace = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfBackspace
    }

    public class func imageOfArrowup(#color: UIColor, keySize: CGRect) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawArrowup(color: color, keySize: keySize)

        let imageOfArrowup = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfArrowup
    }

    public class func imageOfSearch(#frame: CGRect, color: UIColor, scale: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSearch(frame: frame, color: color, scale: scale)

        let imageOfSearch = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSearch
    }

    public class func imageOfArrowheadup(#frame: CGRect, color: UIColor, borderWidth: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawArrowheadup(frame: frame, color: color, borderWidth: borderWidth)

        let imageOfArrowheadup = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfArrowheadup
    }

    public class func imageOfShare(#frame: CGRect, color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawShare(frame: frame, color: color)

        let imageOfShare = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfShare
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}

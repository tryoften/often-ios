//
//  StyleKit.swift
//  Often
//
//  Created by Luc Succes on 1/22/16.
//  Copyright (c) 2016 Project Surf Inc. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Drawing Methods

    public class func drawBackspace(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Frames
        let frame = CGRectMake(keySize.origin.x, keySize.origin.y, keySize.size.width, keySize.size.height)


        //// Icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.14286 * frame.width, frame.minY + 0.20000 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)

        CGContextSetBlendMode(context, .Multiply)
        CGContextBeginTransparencyLayer(context, nil)


        //// arrow-icon
        //// head Drawing
        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(22.95, 33.31))
        headPath.addLineToPoint(CGPointMake(9.75, 20.28))
        headPath.addLineToPoint(CGPointMake(22.6, 7.97))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()


        //// tail Drawing
        let tailPath = UIBezierPath()
        tailPath.moveToPoint(CGPointMake(9.71, 20.43))
        tailPath.addLineToPoint(CGPointMake(47.94, 20.4))
        tailPath.miterLimit = 4;

        tailPath.usesEvenOddFillRule = true;

        color.setStroke()
        tailPath.lineWidth = 3
        tailPath.stroke()




        //// Bar Drawing
        let barPath = UIBezierPath(rect: CGRectMake(0, 0, 3, 40))
        color.setFill()
        barPath.fill()


        CGContextEndTransparencyLayer(context)

        CGContextRestoreGState(context)
    }

    public class func drawArrowup(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Frames
        let frame = CGRectMake(keySize.origin.x, keySize.origin.y, keySize.size.width, keySize.size.height)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48571 * frame.width, frame.minY + 0.49335 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// head Drawing
        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(-12.67, -5.88))
        headPath.addLineToPoint(CGPointMake(0.36, -19.07))
        headPath.addLineToPoint(CGPointMake(12.67, -6.22))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()


        //// tail Drawing
        let tailPath = UIBezierPath()
        tailPath.moveToPoint(CGPointMake(0.21, -19.11))
        tailPath.addLineToPoint(CGPointMake(0.24, 19.11))
        tailPath.miterLimit = 4;

        tailPath.usesEvenOddFillRule = true;

        color.setStroke()
        tailPath.lineWidth = 3
        tailPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawSearch(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// search
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.57045 * frame.width, frame.minY + 0.58812 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Path-82 Drawing
        let path82Path = UIBezierPath()
        path82Path.moveToPoint(CGPointMake(1.45, 1.32))
        path82Path.addLineToPoint(CGPointMake(8.97, 10.58))
        path82Path.miterLimit = 4;

        path82Path.usesEvenOddFillRule = true;

        color.setStroke()
        path82Path.lineWidth = 3
        path82Path.stroke()


        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-13.97, -15.58, 19, 18))
        color.setStroke()
        oval77Path.lineWidth = 3
        oval77Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawArrowheadup(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), borderWidth: CGFloat = 2) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// head Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48860 * frame.width, frame.minY + 0.47676 * frame.height)

        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(-10.9, 5.31))
        headPath.addLineToPoint(CGPointMake(-0, -5.31))
        headPath.addLineToPoint(CGPointMake(10.9, 5.29))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = borderWidth
        headPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawShare(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// share
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 13.16, 10.3)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// square Drawing
        let squarePath = UIBezierPath()
        squarePath.moveToPoint(CGPointMake(7.79, 15.53))
        squarePath.addLineToPoint(CGPointMake(15.39, 15.45))
        squarePath.addLineToPoint(CGPointMake(15.39, 30.11))
        squarePath.addLineToPoint(CGPointMake(0.73, 30.11))
        squarePath.addLineToPoint(CGPointMake(0.73, 15.45))
        squarePath.addLineToPoint(CGPointMake(7.79, 15.53))
        squarePath.closePath()
        squarePath.miterLimit = 4;

        squarePath.usesEvenOddFillRule = true;

        color.setStroke()
        squarePath.lineWidth = 3
        squarePath.stroke()


        //// line Drawing
        let linePath = UIBezierPath()
        linePath.moveToPoint(CGPointMake(8.08, 1.15))
        linePath.addLineToPoint(CGPointMake(8.01, 15.97))
        linePath.miterLimit = 4;

        linePath.usesEvenOddFillRule = true;

        color.setStroke()
        linePath.lineWidth = 3
        linePath.stroke()


        //// head Drawing
        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(0, 8.08))
        headPath.addLineToPoint(CGPointMake(7.99, 0))
        headPath.addLineToPoint(CGPointMake(15.98, 8.07))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawClose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// close
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48651 * frame.width, frame.minY + 0.48646 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// rightBar Drawing
        CGContextSaveGState(context)

        let rightBarPath = UIBezierPath()
        rightBarPath.moveToPoint(CGPointMake(15.97, -11.31))
        rightBarPath.addLineToPoint(CGPointMake(11.98, -15.08))
        rightBarPath.addLineToPoint(CGPointMake(-15.97, 11.31))
        rightBarPath.addLineToPoint(CGPointMake(-11.98, 15.08))
        rightBarPath.addLineToPoint(CGPointMake(15.97, -11.31))
        rightBarPath.addLineToPoint(CGPointMake(15.97, -11.31))
        rightBarPath.closePath()
        rightBarPath.miterLimit = 4;

        rightBarPath.usesEvenOddFillRule = true;

        color.setFill()
        rightBarPath.fill()

        CGContextRestoreGState(context)


        //// leftBar Drawing
        CGContextSaveGState(context)

        let leftBarPath = UIBezierPath()
        leftBarPath.moveToPoint(CGPointMake(-15.97, -11.31))
        leftBarPath.addLineToPoint(CGPointMake(-11.98, -15.08))
        leftBarPath.addLineToPoint(CGPointMake(15.97, 11.31))
        leftBarPath.addLineToPoint(CGPointMake(11.98, 15.08))
        leftBarPath.addLineToPoint(CGPointMake(-15.97, -11.31))
        leftBarPath.addLineToPoint(CGPointMake(-15.97, -11.31))
        leftBarPath.closePath()
        leftBarPath.miterLimit = 4;

        leftBarPath.usesEvenOddFillRule = true;

        color.setFill()
        leftBarPath.fill()

        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

    public class func drawButtonclose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// close 2
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.51429 * frame.width, frame.minY + 0.50159 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-406 Drawing
        let rectangle406Path = UIBezierPath()
        rectangle406Path.moveToPoint(CGPointMake(-7.99, -5.66))
        rectangle406Path.addLineToPoint(CGPointMake(-5.99, -7.54))
        rectangle406Path.addLineToPoint(CGPointMake(7.99, 5.66))
        rectangle406Path.addLineToPoint(CGPointMake(5.99, 7.54))
        rectangle406Path.addLineToPoint(CGPointMake(-7.99, -5.66))
        rectangle406Path.addLineToPoint(CGPointMake(-7.99, -5.66))
        rectangle406Path.closePath()
        rectangle406Path.miterLimit = 4;

        rectangle406Path.usesEvenOddFillRule = true;

        color.setFill()
        rectangle406Path.fill()


        //// Rectangle-407 Drawing
        let rectangle407Path = UIBezierPath()
        rectangle407Path.moveToPoint(CGPointMake(7.99, -5.66))
        rectangle407Path.addLineToPoint(CGPointMake(5.99, -7.54))
        rectangle407Path.addLineToPoint(CGPointMake(-7.99, 5.66))
        rectangle407Path.addLineToPoint(CGPointMake(-5.99, 7.54))
        rectangle407Path.addLineToPoint(CGPointMake(7.99, -5.66))
        rectangle407Path.addLineToPoint(CGPointMake(7.99, -5.66))
        rectangle407Path.closePath()
        rectangle407Path.miterLimit = 4;

        rectangle407Path.usesEvenOddFillRule = true;

        color.setFill()
        rectangle407Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawFavorite(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false, favorited: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let tealColor = UIColor(red: 0.145, green: 0.780, blue: 0.530, alpha: 1.000)
        let favoriteIconColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let strokeColor = selected ? highlightedColor : color
        let favoritedFillColor = favorited ? tealColor : noneColor
        let favoritedIconColor = favorited ? favoriteIconColor : strokeColor
        let favoritedStrokeColor = favorited ? tealColor : strokeColor

        //// Frames
        let frame = CGRectMake(0, -0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 11.5, frame.minY + 8, 80.5, 80.5))
        favoritedFillColor.setFill()
        circlePath.fill()
        favoritedStrokeColor.setStroke()
        circlePath.lineWidth = 3
        circlePath.stroke()


        //// star Drawing
        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(51.92, 54.5))
        starPath.addLineToPoint(CGPointMake(42.6, 61))
        starPath.addLineToPoint(CGPointMake(45.88, 50.11))
        starPath.addLineToPoint(CGPointMake(frame.minX + 36.83, frame.minY + 43.24))
        starPath.addLineToPoint(CGPointMake(frame.minX + 48.19, frame.minY + 43))
        starPath.addLineToPoint(CGPointMake(51.92, 32.26))
        starPath.addLineToPoint(CGPointMake(55.65, 43))
        starPath.addLineToPoint(CGPointMake(67, 43.24))
        starPath.addLineToPoint(CGPointMake(57.95, 50.11))
        starPath.addLineToPoint(CGPointMake(61.24, 61))
        starPath.addLineToPoint(CGPointMake(51.92, 54.5))
        starPath.closePath()
        starPath.miterLimit = 4;

        starPath.lineCapStyle = .Round;

        starPath.lineJoinStyle = .Round;

        starPath.usesEvenOddFillRule = true;

        favoritedIconColor.setFill()
        starPath.fill()
        favoritedIconColor.setStroke()
        starPath.lineWidth = 4
        starPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawFavoritedstate(frame frame: CGRect = CGRectMake(0, 0, 62, 62), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let tealColor = UIColor(red: 0.145, green: 0.780, blue: 0.530, alpha: 1.000)
        let favoriteIconColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        var favoriteIconColorHueComponent: CGFloat = 1,
            favoriteIconColorSaturationComponent: CGFloat = 1,
            favoriteIconColorBrightnessComponent: CGFloat = 1
        favoriteIconColor.getHue(&favoriteIconColorHueComponent, saturation: &favoriteIconColorSaturationComponent, brightness: &favoriteIconColorBrightnessComponent, alpha: nil)

        let fillColor2 = UIColor(hue: favoriteIconColorHueComponent, saturation: 0, brightness: favoriteIconColorBrightnessComponent, alpha: CGColorGetAlpha(favoriteIconColor.CGColor))

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 62, frame.minY + 62)
        CGContextScaleCTM(context, scale, scale)



        //// triangle Drawing
        let trianglePath = UIBezierPath()
        trianglePath.moveToPoint(CGPointMake(0, -62))
        trianglePath.addLineToPoint(CGPointMake(-0, -0))
        trianglePath.addLineToPoint(CGPointMake(-62, 0))
        trianglePath.addLineToPoint(CGPointMake(0, -62))
        trianglePath.closePath()
        trianglePath.miterLimit = 4;

        trianglePath.usesEvenOddFillRule = true;

        tealColor.setFill()
        trianglePath.fill()


        //// star Drawing
        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(-18.75, -30.85))
        starPath.addLineToPoint(CGPointMake(-16.1, -23.19))
        starPath.addLineToPoint(CGPointMake(-8, -23.04))
        starPath.addLineToPoint(CGPointMake(-14.47, -18.16))
        starPath.addLineToPoint(CGPointMake(-12.11, -10.41))
        starPath.addLineToPoint(CGPointMake(-18.75, -15.05))
        starPath.addLineToPoint(CGPointMake(-25.39, -10.41))
        starPath.addLineToPoint(CGPointMake(-23.03, -18.16))
        starPath.addLineToPoint(CGPointMake(-29.5, -23.04))
        starPath.addLineToPoint(CGPointMake(-21.4, -23.19))
        starPath.closePath()
        fillColor2.setFill()
        starPath.fill()



        CGContextRestoreGState(context)
    }

    public class func drawRefresharrow(frame frame: CGRect = CGRectMake(4, 2, 22, 26), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let favoriteIconColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        var favoriteIconColorHueComponent: CGFloat = 1,
            favoriteIconColorSaturationComponent: CGFloat = 1,
            favoriteIconColorBrightnessComponent: CGFloat = 1
        favoriteIconColor.getHue(&favoriteIconColorHueComponent, saturation: &favoriteIconColorSaturationComponent, brightness: &favoriteIconColorBrightnessComponent, alpha: nil)

        let fillColor2 = UIColor(hue: favoriteIconColorHueComponent, saturation: 0, brightness: favoriteIconColorBrightnessComponent, alpha: CGColorGetAlpha(favoriteIconColor.CGColor))

        //// arrow
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.52273 * frame.width, frame.minY + 0.50962 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-1306 Drawing
        let rectangle1306Path = UIBezierPath(rect: CGRectMake(-2, -9.5, 4, 21))
        fillColor2.setFill()
        rectangle1306Path.fill()


        //// Path-319 Drawing
        let path319Path = UIBezierPath()
        path319Path.moveToPoint(CGPointMake(-9, -2.5))
        path319Path.addLineToPoint(CGPointMake(0, -11.5))
        path319Path.addLineToPoint(CGPointMake(9, -2.5))
        path319Path.miterLimit = 4;

        path319Path.usesEvenOddFillRule = true;

        strokeColor2.setStroke()
        path319Path.lineWidth = 4
        path319Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawTrash(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// delete
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 4)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// Path-924 Drawing
        let path924Path = UIBezierPath()
        path924Path.moveToPoint(CGPointMake(frame.minX + 25, frame.minY + 33.59))
        path924Path.addLineToPoint(CGPointMake(31.97, 60.62))
        path924Path.addLineToPoint(CGPointMake(52, 60.62))
        path924Path.addLineToPoint(CGPointMake(58, 33.59))
        path924Path.addLineToPoint(CGPointMake(frame.minX + 25, frame.minY + 33.59))
        path924Path.closePath()
        path924Path.miterLimit = 4;

        path924Path.lineCapStyle = .Round;

        path924Path.lineJoinStyle = .Round;

        path924Path.usesEvenOddFillRule = true;

        selectedFillColor.setFill()
        path924Path.fill()
        selectedHighlightColor.setStroke()
        path924Path.lineWidth = 4
        path924Path.stroke()


        //// Path-925 Drawing
        let path925Path = UIBezierPath()
        path925Path.moveToPoint(CGPointMake(frame.minX + 27, frame.minY + 25.5))
        path925Path.addLineToPoint(CGPointMake(55, 25.5))
        path925Path.miterLimit = 4;

        path925Path.lineCapStyle = .Round;

        path925Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path925Path.lineWidth = 4
        path925Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawClipboard(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// copy
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 4)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// Path-926 Drawing
        let path926Path = UIBezierPath()
        path926Path.moveToPoint(CGPointMake(52.48, 44.61))
        path926Path.addLineToPoint(CGPointMake(52.48, 28.39))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 42.46, frame.minY + 19), controlPoint1: CGPointMake(52.48, 28.39), controlPoint2: CGPointMake(frame.minX + 53.34, frame.minY + 19))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 32, frame.minY + 28.39), controlPoint1: CGPointMake(frame.minX + 31.57, frame.minY + 19), controlPoint2: CGPointMake(frame.minX + 32, frame.minY + 28.39))
        path926Path.addLineToPoint(CGPointMake(32, 56.56))
        path926Path.addCurveToPoint(CGPointMake(38.83, 63.38), controlPoint1: CGPointMake(32, 56.56), controlPoint2: CGPointMake(31.86, 63.38))
        path926Path.addCurveToPoint(CGPointMake(45.94, 56.56), controlPoint1: CGPointMake(45.8, 63.38), controlPoint2: CGPointMake(45.94, 56.56))
        path926Path.addLineToPoint(CGPointMake(frame.minX + 45.94, frame.minY + 31.8))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 42.46, frame.minY + 27.54), controlPoint1: CGPointMake(frame.minX + 45.94, frame.minY + 31.8), controlPoint2: CGPointMake(frame.minX + 46.51, frame.minY + 27.54))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 38.83, frame.minY + 31.8), controlPoint1: CGPointMake(frame.minX + 38.4, frame.minY + 27.54), controlPoint2: CGPointMake(frame.minX + 38.83, frame.minY + 31.8))
        path926Path.addLineToPoint(CGPointMake(38.83, 54.85))
        path926Path.miterLimit = 4;

        path926Path.lineCapStyle = .Round;

        path926Path.lineJoinStyle = .Round;

        path926Path.usesEvenOddFillRule = true;

        selectedFillColor.setFill()
        path926Path.fill()
        selectedHighlightColor.setStroke()
        path926Path.lineWidth = 4
        path926Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawCheckmark(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(-1.5, -1.5, 50, 50)


        //// shape
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 5.75, 4.75)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        circlePath.fill()
        strokeColor.setStroke()
        circlePath.lineWidth = 3
        circlePath.stroke()


        //// check Drawing
        let checkPath = UIBezierPath()
        checkPath.moveToPoint(CGPointMake(frame.minX + 25, frame.minY + 43))
        checkPath.addLineToPoint(CGPointMake(35.5, 53.5))
        checkPath.addLineToPoint(CGPointMake(58.5, 27.5))
        checkPath.miterLimit = 4;

        checkPath.lineCapStyle = .Round;

        checkPath.lineJoinStyle = .Round;

        checkPath.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        checkPath.lineWidth = 4
        checkPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawCancel(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 4)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        circlePath.fill()
        strokeColor.setStroke()
        circlePath.lineWidth = 3
        circlePath.stroke()


        //// cancelIcon Drawing
        let cancelIconPath = UIBezierPath()
        cancelIconPath.moveToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 38.67))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 31.6, frame.minY + 28.77))
        cancelIconPath.addCurveToPoint(CGPointMake(frame.minX + 28.77, frame.minY + 28.77), controlPoint1: CGPointMake(frame.minX + 30.82, frame.minY + 27.99), controlPoint2: CGPointMake(frame.minX + 29.55, frame.minY + 27.99))
        cancelIconPath.addCurveToPoint(CGPointMake(frame.minX + 28.77, frame.minY + 31.6), controlPoint1: CGPointMake(frame.minX + 27.99, frame.minY + 29.56), controlPoint2: CGPointMake(frame.minX + 27.99, frame.minY + 30.82))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 38.67, frame.minY + 41.5))
        cancelIconPath.addLineToPoint(CGPointMake(28.77, 51.4))
        cancelIconPath.addCurveToPoint(CGPointMake(28.77, 54.23), controlPoint1: CGPointMake(27.99, 52.18), controlPoint2: CGPointMake(27.99, 53.44))
        cancelIconPath.addCurveToPoint(CGPointMake(31.6, 54.23), controlPoint1: CGPointMake(29.55, 55.01), controlPoint2: CGPointMake(30.82, 55.01))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 44.33))
        cancelIconPath.addLineToPoint(CGPointMake(51.4, 54.23))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 54.23), controlPoint1: CGPointMake(52.18, 55.01), controlPoint2: CGPointMake(53.45, 55.01))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 51.4), controlPoint1: CGPointMake(55.01, 53.44), controlPoint2: CGPointMake(55.01, 52.18))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 44.33, frame.minY + 41.5))
        cancelIconPath.addLineToPoint(CGPointMake(54.23, 31.6))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 28.77), controlPoint1: CGPointMake(55.01, 30.82), controlPoint2: CGPointMake(55.01, 29.56))
        cancelIconPath.addCurveToPoint(CGPointMake(51.4, 28.77), controlPoint1: CGPointMake(53.45, 27.99), controlPoint2: CGPointMake(52.18, 27.99))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 38.67))
        cancelIconPath.closePath()
        cancelIconPath.miterLimit = 4;

        cancelIconPath.usesEvenOddFillRule = true;

        selectedHighlightColor.setFill()
        cancelIconPath.fill()



        CGContextRestoreGState(context)
    }

    public class func drawInsert(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 5)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// path-1 Drawing
        let path1Path = UIBezierPath()
        path1Path.moveToPoint(CGPointMake(frame.minX + 30.71, frame.minY + 40.93))
        path1Path.addLineToPoint(CGPointMake(frame.minX + 41.52, frame.minY + 29.93))
        path1Path.addLineToPoint(CGPointMake(51.73, 40.64))
        path1Path.miterLimit = 4;

        path1Path.lineCapStyle = .Round;

        path1Path.lineJoinStyle = .Round;

        path1Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path1Path.lineWidth = 4
        path1Path.stroke()


        //// Path- 2 Drawing
        let path2Path = UIBezierPath()
        path2Path.moveToPoint(CGPointMake(frame.minX + 41.39, frame.minY + 29.89))
        path2Path.addLineToPoint(CGPointMake(41.41, 61.61))
        path2Path.miterLimit = 4;

        path2Path.lineCapStyle = .Round;

        path2Path.lineJoinStyle = .Round;

        path2Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path2Path.lineWidth = 4
        path2Path.stroke()


        //// Path-106 Drawing
        let path106Path = UIBezierPath()
        path106Path.moveToPoint(CGPointMake(frame.minX + 29, frame.minY + 23))
        path106Path.addLineToPoint(CGPointMake(54, 23))
        path106Path.miterLimit = 4;

        path106Path.lineCapStyle = .Round;

        path106Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path106Path.lineWidth = 4
        path106Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawKeyboard(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50143 * frame.width, frame.minY + 0.48750 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-387 Drawing
        let rectangle387Path = UIBezierPath()
        rectangle387Path.moveToPoint(CGPointMake(-23.1, 6.7))
        rectangle387Path.addCurveToPoint(CGPointMake(-24.1, 7.7), controlPoint1: CGPointMake(-23.65, 6.7), controlPoint2: CGPointMake(-24.1, 7.15))
        rectangle387Path.addLineToPoint(CGPointMake(-24.1, 12.35))
        rectangle387Path.addCurveToPoint(CGPointMake(-23.1, 13.35), controlPoint1: CGPointMake(-24.1, 12.9), controlPoint2: CGPointMake(-23.65, 13.35))
        rectangle387Path.addLineToPoint(CGPointMake(22.9, 13.35))
        rectangle387Path.addCurveToPoint(CGPointMake(23.9, 12.35), controlPoint1: CGPointMake(23.45, 13.35), controlPoint2: CGPointMake(23.9, 12.9))
        rectangle387Path.addLineToPoint(CGPointMake(23.9, 7.7))
        rectangle387Path.addCurveToPoint(CGPointMake(22.9, 6.7), controlPoint1: CGPointMake(23.9, 7.15), controlPoint2: CGPointMake(23.45, 6.7))
        rectangle387Path.addLineToPoint(CGPointMake(-23.1, 6.7))
        rectangle387Path.closePath()
        rectangle387Path.miterLimit = 4;

        rectangle387Path.usesEvenOddFillRule = true;

        color.setFill()
        rectangle387Path.fill()


        //// Rectangle-340 Drawing
        let rectangle340Path = UIBezierPath()
        rectangle340Path.moveToPoint(CGPointMake(-23.1, -3.33))
        rectangle340Path.addCurveToPoint(CGPointMake(-24.1, -2.33), controlPoint1: CGPointMake(-23.65, -3.33), controlPoint2: CGPointMake(-24.1, -2.88))
        rectangle340Path.addLineToPoint(CGPointMake(-24.1, 2.32))
        rectangle340Path.addCurveToPoint(CGPointMake(-23.1, 3.32), controlPoint1: CGPointMake(-24.1, 2.87), controlPoint2: CGPointMake(-23.65, 3.32))
        rectangle340Path.addLineToPoint(CGPointMake(-18.59, 3.32))
        rectangle340Path.addCurveToPoint(CGPointMake(-17.59, 2.32), controlPoint1: CGPointMake(-18.04, 3.32), controlPoint2: CGPointMake(-17.59, 2.87))
        rectangle340Path.addLineToPoint(CGPointMake(-17.59, -2.33))
        rectangle340Path.addCurveToPoint(CGPointMake(-18.59, -3.33), controlPoint1: CGPointMake(-17.59, -2.88), controlPoint2: CGPointMake(-18.04, -3.33))
        rectangle340Path.addLineToPoint(CGPointMake(-23.1, -3.33))
        rectangle340Path.closePath()
        rectangle340Path.miterLimit = 4;

        rectangle340Path.usesEvenOddFillRule = true;

        color.setFill()
        rectangle340Path.fill()


        //// Rectangle-340-Copy Drawing
        let rectangle340CopyPath = UIBezierPath(roundedRect: CGRectMake(-13.65, -3.33, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340CopyPath.fill()


        //// Rectangle-340-Copy-2 Drawing
        let rectangle340Copy2Path = UIBezierPath(roundedRect: CGRectMake(-3.25, -3.33, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy2Path.fill()


        //// Rectangle-340-Copy-3 Drawing
        let rectangle340Copy3Path = UIBezierPath(roundedRect: CGRectMake(7.2, -3.33, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy3Path.fill()


        //// Rectangle-340-Copy-8 Drawing
        let rectangle340Copy8Path = UIBezierPath(roundedRect: CGRectMake(16.95, -3.33, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy8Path.fill()


        //// Rectangle-340-Copy-7 Drawing
        let rectangle340Copy7Path = UIBezierPath(roundedRect: CGRectMake(-18.9, -13.18, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy7Path.fill()


        //// Rectangle-340-Copy-6 Drawing
        let rectangle340Copy6Path = UIBezierPath(roundedRect: CGRectMake(-8.45, -13.18, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy6Path.fill()


        //// Rectangle-340-Copy-5 Drawing
        let rectangle340Copy5Path = UIBezierPath(roundedRect: CGRectMake(1.95, -13.18, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy5Path.fill()


        //// Rectangle-340-Copy-4 Drawing
        let rectangle340Copy4Path = UIBezierPath(roundedRect: CGRectMake(12.4, -13.18, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy4Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawUndo(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 5.5, 4.5)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// Path-931 Drawing
        let path931Path = UIBezierPath()
        path931Path.moveToPoint(CGPointMake(28.25, 26.64))
        path931Path.addLineToPoint(CGPointMake(18.89, 36.12))
        path931Path.addLineToPoint(CGPointMake(28.25, 44.36))
        path931Path.miterLimit = 4;

        path931Path.lineCapStyle = .Round;

        path931Path.lineJoinStyle = .Round;

        path931Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path931Path.lineWidth = 4
        path931Path.stroke()


        //// Path-145 Drawing
        let path145Path = UIBezierPath()
        path145Path.moveToPoint(CGPointMake(42.5, 51.5))
        path145Path.addLineToPoint(CGPointMake(54.5, 51.5))
        path145Path.addCurveToPoint(CGPointMake(62.5, 43.5), controlPoint1: CGPointMake(54.5, 51.5), controlPoint2: CGPointMake(62.5, 51.21))
        path145Path.addCurveToPoint(CGPointMake(54.5, 35.5), controlPoint1: CGPointMake(62.5, 35.79), controlPoint2: CGPointMake(54.5, 35.5))
        path145Path.addLineToPoint(CGPointMake(19.5, 35.5))
        path145Path.miterLimit = 4;

        path145Path.lineCapStyle = .Round;

        path145Path.lineJoinStyle = .Round;

        path145Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path145Path.lineWidth = 4
        path145Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawClosebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor6 = UIColor(red: 0.812, green: 0.812, blue: 0.812, alpha: 0.540)
        let fillColor7 = UIColor(red: 0.383, green: 0.383, blue: 0.387, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-35, -35, 70, 70))
        fillColor6.setFill()
        oval77Path.fill()


        //// Rectangle-614 Drawing
        let rectangle614Path = UIBezierPath()
        rectangle614Path.moveToPoint(CGPointMake(2.83, -1))
        rectangle614Path.addLineToPoint(CGPointMake(10.61, -8.78))
        rectangle614Path.addCurveToPoint(CGPointMake(10.61, -11.61), controlPoint1: CGPointMake(11.39, -9.56), controlPoint2: CGPointMake(11.39, -10.83))
        rectangle614Path.addCurveToPoint(CGPointMake(7.78, -11.61), controlPoint1: CGPointMake(9.82, -12.39), controlPoint2: CGPointMake(8.56, -12.39))
        rectangle614Path.addLineToPoint(CGPointMake(0, -3.83))
        rectangle614Path.addLineToPoint(CGPointMake(-7.78, -11.61))
        rectangle614Path.addCurveToPoint(CGPointMake(-10.61, -11.61), controlPoint1: CGPointMake(-8.56, -12.39), controlPoint2: CGPointMake(-9.83, -12.39))
        rectangle614Path.addCurveToPoint(CGPointMake(-10.61, -8.78), controlPoint1: CGPointMake(-11.39, -10.82), controlPoint2: CGPointMake(-11.39, -9.56))
        rectangle614Path.addLineToPoint(CGPointMake(-2.83, -1))
        rectangle614Path.addLineToPoint(CGPointMake(-10.61, 6.78))
        rectangle614Path.addCurveToPoint(CGPointMake(-10.61, 9.61), controlPoint1: CGPointMake(-11.39, 7.56), controlPoint2: CGPointMake(-11.39, 8.83))
        rectangle614Path.addCurveToPoint(CGPointMake(-7.78, 9.61), controlPoint1: CGPointMake(-9.82, 10.39), controlPoint2: CGPointMake(-8.56, 10.39))
        rectangle614Path.addLineToPoint(CGPointMake(0, 1.83))
        rectangle614Path.addLineToPoint(CGPointMake(7.78, 9.61))
        rectangle614Path.addCurveToPoint(CGPointMake(10.61, 9.61), controlPoint1: CGPointMake(8.56, 10.39), controlPoint2: CGPointMake(9.83, 10.39))
        rectangle614Path.addCurveToPoint(CGPointMake(10.61, 6.78), controlPoint1: CGPointMake(11.39, 8.82), controlPoint2: CGPointMake(11.39, 7.56))
        rectangle614Path.addLineToPoint(CGPointMake(2.83, -1))
        rectangle614Path.closePath()
        rectangle614Path.miterLimit = 4;

        rectangle614Path.usesEvenOddFillRule = true;

        fillColor7.setFill()
        rectangle614Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawSearchbaricon(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 16.75, frame.minY + 16.5)
        CGContextScaleCTM(context, scale, scale)



        //// Path-82 Drawing
        let path82Path = UIBezierPath()
        path82Path.moveToPoint(CGPointMake(7.28, 9.13))
        path82Path.addLineToPoint(CGPointMake(13.24, 16.32))
        path82Path.miterLimit = 4;

        path82Path.usesEvenOddFillRule = true;

        color.setStroke()
        path82Path.lineWidth = 3
        path82Path.stroke()


        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-11.5, -11, 23, 22))
        color.setStroke()
        oval77Path.lineWidth = 3
        oval77Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawSharebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 18, frame.minY + 17)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-653 Drawing
        let rectangle653Path = UIBezierPath(roundedRect: CGRectMake(-2, -4, 4, 18), cornerRadius: 2)
        color.setFill()
        rectangle653Path.fill()


        //// Rectangle-654 Drawing
        let rectangle654Path = UIBezierPath(roundedRect: CGRectMake(-10, -14, 20, 4), cornerRadius: 2)
        color.setFill()
        rectangle654Path.fill()


        //// Path-153 Drawing
        let path153Path = UIBezierPath()
        path153Path.moveToPoint(CGPointMake(-8, 2))
        path153Path.addLineToPoint(CGPointMake(0, -6))
        path153Path.addLineToPoint(CGPointMake(8, 2))
        path153Path.miterLimit = 4;

        path153Path.lineCapStyle = .Round;

        path153Path.lineJoinStyle = .Round;

        path153Path.usesEvenOddFillRule = true;

        color.setStroke()
        path153Path.lineWidth = 4
        path153Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawSettings(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let mainAppHighlightColor = UIColor(red: 0.692, green: 0.692, blue: 0.692, alpha: 1.000)

        //// Variable Declarations
        let mainAppStrokeColor = selected ? highlightedColor : mainAppHighlightColor

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 11, 7)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-351-Copy Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 30, frame.minY + 33)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let rectangle351CopyPath = UIBezierPath(roundedRect: CGRectMake(-16.62, -16.62, 33.25, 33.25), cornerRadius: 8)
        mainAppStrokeColor.setStroke()
        rectangle351CopyPath.lineWidth = 4
        rectangle351CopyPath.stroke()

        CGContextRestoreGState(context)


        //// Oval-17 Drawing
        let oval17Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 23.4, frame.minY + 26.4, 13.1, 13.1))
        mainAppStrokeColor.setStroke()
        oval17Path.lineWidth = 4
        oval17Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawTrending(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let mainAppHighlightColor = UIColor(red: 0.692, green: 0.692, blue: 0.692, alpha: 1.000)

        //// Variable Declarations
        let mainAppStrokeColor = selected ? highlightedColor : mainAppHighlightColor

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 13, 12)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-344-Copy Drawing
        let rectangle344CopyPath = UIBezierPath()
        rectangle344CopyPath.moveToPoint(CGPointMake(frame.minX + 42, frame.minY + 6.83))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 42, frame.minY + 36))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 40, frame.minY + 38), controlPoint1: CGPointMake(frame.minX + 42, frame.minY + 37.1), controlPoint2: CGPointMake(frame.minX + 41.11, frame.minY + 38))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 38, frame.minY + 36), controlPoint1: CGPointMake(frame.minX + 38.9, frame.minY + 38), controlPoint2: CGPointMake(frame.minX + 38, frame.minY + 37.11))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 38, frame.minY + 6.83))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 29.75, frame.minY + 15.08))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 26.93, frame.minY + 15.07), controlPoint1: CGPointMake(frame.minX + 28.97, frame.minY + 15.86), controlPoint2: CGPointMake(frame.minX + 27.72, frame.minY + 15.86))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 26.92, frame.minY + 12.25), controlPoint1: CGPointMake(frame.minX + 26.15, frame.minY + 14.29), controlPoint2: CGPointMake(frame.minX + 26.15, frame.minY + 13.02))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 38.25, frame.minY + 0.92))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 40, frame.minY + 0.37), controlPoint1: CGPointMake(frame.minX + 38.73, frame.minY + 0.45), controlPoint2: CGPointMake(frame.minX + 39.38, frame.minY + 0.26))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 41.75, frame.minY + 0.92), controlPoint1: CGPointMake(frame.minX + 40.62, frame.minY + 0.26), controlPoint2: CGPointMake(frame.minX + 41.27, frame.minY + 0.45))
        rectangle344CopyPath.addLineToPoint(CGPointMake(53.08, 12.25))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(53.07, 15.07), controlPoint1: CGPointMake(53.85, 13.02), controlPoint2: CGPointMake(53.85, 14.29))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(50.25, 15.08), controlPoint1: CGPointMake(52.28, 15.86), controlPoint2: CGPointMake(51.03, 15.86))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 42, frame.minY + 6.83))
        rectangle344CopyPath.closePath()
        rectangle344CopyPath.moveToPoint(CGPointMake(frame.minX, frame.minY + 26))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 2, frame.minY + 24), controlPoint1: CGPointMake(frame.minX, frame.minY + 24.9), controlPoint2: CGPointMake(frame.minX + 0.89, frame.minY + 24))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 24, frame.minY + 24))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 26, frame.minY + 26), controlPoint1: CGPointMake(frame.minX + 25.11, frame.minY + 24), controlPoint2: CGPointMake(frame.minX + 26, frame.minY + 24.89))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 24, frame.minY + 28), controlPoint1: CGPointMake(frame.minX + 26, frame.minY + 27.1), controlPoint2: CGPointMake(frame.minX + 25.11, frame.minY + 28))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 2, frame.minY + 28))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX, frame.minY + 26), controlPoint1: CGPointMake(frame.minX + 0.89, frame.minY + 28), controlPoint2: CGPointMake(frame.minX, frame.minY + 27.11))
        rectangle344CopyPath.closePath()
        rectangle344CopyPath.moveToPoint(CGPointMake(frame.minX, frame.minY + 16))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 2, frame.minY + 14), controlPoint1: CGPointMake(frame.minX, frame.minY + 14.9), controlPoint2: CGPointMake(frame.minX + 0.89, frame.minY + 14))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 16, frame.minY + 14))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 18, frame.minY + 16), controlPoint1: CGPointMake(frame.minX + 17.11, frame.minY + 14), controlPoint2: CGPointMake(frame.minX + 18, frame.minY + 14.89))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 16, frame.minY + 18), controlPoint1: CGPointMake(frame.minX + 18, frame.minY + 17.1), controlPoint2: CGPointMake(frame.minX + 17.11, frame.minY + 18))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 2, frame.minY + 18))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX, frame.minY + 16), controlPoint1: CGPointMake(frame.minX + 0.89, frame.minY + 18), controlPoint2: CGPointMake(frame.minX, frame.minY + 17.11))
        rectangle344CopyPath.closePath()
        rectangle344CopyPath.moveToPoint(CGPointMake(frame.minX, frame.minY + 37))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 2, frame.minY + 35), controlPoint1: CGPointMake(frame.minX, frame.minY + 35.9), controlPoint2: CGPointMake(frame.minX + 0.89, frame.minY + 35))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 24, frame.minY + 35))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 26, frame.minY + 37), controlPoint1: CGPointMake(frame.minX + 25.11, frame.minY + 35), controlPoint2: CGPointMake(frame.minX + 26, frame.minY + 35.89))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 24, frame.minY + 39), controlPoint1: CGPointMake(frame.minX + 26, frame.minY + 38.1), controlPoint2: CGPointMake(frame.minX + 25.11, frame.minY + 39))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 2, frame.minY + 39))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX, frame.minY + 37), controlPoint1: CGPointMake(frame.minX + 0.89, frame.minY + 39), controlPoint2: CGPointMake(frame.minX, frame.minY + 38.11))
        rectangle344CopyPath.closePath()
        rectangle344CopyPath.miterLimit = 4;

        rectangle344CopyPath.usesEvenOddFillRule = true;

        mainAppStrokeColor.setFill()
        rectangle344CopyPath.fill()
        mainAppStrokeColor.setStroke()
        rectangle344CopyPath.lineWidth = 1
        rectangle344CopyPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawProfile(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let mainAppHighlightColor = UIColor(red: 0.692, green: 0.692, blue: 0.692, alpha: 1.000)

        //// Variable Declarations
        let mainAppStrokeColor = selected ? highlightedColor : mainAppHighlightColor

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 14, 8)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-17 Drawing
        let oval17Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 13.4, frame.minY + 13.4, 18.1, 18.1))
        mainAppStrokeColor.setStroke()
        oval17Path.lineWidth = 4
        oval17Path.stroke()


        //// Path-152 Drawing
        let path152Path = UIBezierPath()
        path152Path.moveToPoint(CGPointMake(7.21, 50.77))
        path152Path.addCurveToPoint(CGPointMake(frame.minX + 22.21, frame.minY + 38.77), controlPoint1: CGPointMake(7.21, 50.77), controlPoint2: CGPointMake(frame.minX + 11.22, frame.minY + 38.77))
        path152Path.addCurveToPoint(CGPointMake(37.21, 50.77), controlPoint1: CGPointMake(frame.minX + 33.21, frame.minY + 38.77), controlPoint2: CGPointMake(37.21, 50.77))
        path152Path.miterLimit = 4;

        path152Path.lineCapStyle = .Round;

        path152Path.lineJoinStyle = .Round;

        path152Path.usesEvenOddFillRule = true;

        mainAppStrokeColor.setStroke()
        path152Path.lineWidth = 4
        path152Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawGlobebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor6 = UIColor(red: 0.812, green: 0.812, blue: 0.812, alpha: 0.540)
        let fillColor7 = UIColor(red: 0.383, green: 0.383, blue: 0.387, alpha: 1.000)
        let strokeColor5 = UIColor(red: 0.383, green: 0.383, blue: 0.387, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(-35, -35, 70, 70))
        fillColor6.setFill()
        circlePath.fill()


        //// Oval-1 Drawing
        let oval1Path = UIBezierPath(ovalInRect: CGRectMake(-14.13, -16, 29.03, 30))
        strokeColor5.setStroke()
        oval1Path.lineWidth = 2
        oval1Path.stroke()


        //// Rectangle-10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRectMake(-0.48, -15, 1.94, 28))
        fillColor7.setFill()
        rectangle10Path.fill()


        //// Rectangle-11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRectMake(-13.5, -1.98, 28, 1.95))
        fillColor7.setFill()
        rectangle11Path.fill()


        //// Rectangle- 3 Drawing
        let rectangle3Path = UIBezierPath()
        rectangle3Path.moveToPoint(CGPointMake(5.32, -15))
        rectangle3Path.addCurveToPoint(CGPointMake(7.26, -1), controlPoint1: CGPointMake(5.32, -15), controlPoint2: CGPointMake(7.26, -5.58))
        rectangle3Path.addCurveToPoint(CGPointMake(5.32, 13), controlPoint1: CGPointMake(7.26, 3.75), controlPoint2: CGPointMake(5.32, 13))
        rectangle3Path.addLineToPoint(CGPointMake(7.26, 13))
        rectangle3Path.addCurveToPoint(CGPointMake(8.75, 6.1), controlPoint1: CGPointMake(7.26, 13), controlPoint2: CGPointMake(8.08, 9.74))
        rectangle3Path.addCurveToPoint(CGPointMake(9.58, -1), controlPoint1: CGPointMake(9.2, 3.61), controlPoint2: CGPointMake(9.58, 0.94))
        rectangle3Path.addCurveToPoint(CGPointMake(7.26, -15), controlPoint1: CGPointMake(9.58, -5.54), controlPoint2: CGPointMake(7.26, -15))
        rectangle3Path.addLineToPoint(CGPointMake(5.32, -15))
        rectangle3Path.closePath()
        rectangle3Path.miterLimit = 4;

        rectangle3Path.usesEvenOddFillRule = true;

        fillColor7.setFill()
        rectangle3Path.fill()


        //// Rectangle-12 Drawing
        let rectangle12Path = UIBezierPath()
        rectangle12Path.moveToPoint(CGPointMake(-3.97, -15))
        rectangle12Path.addCurveToPoint(CGPointMake(-5.9, -1), controlPoint1: CGPointMake(-3.97, -15), controlPoint2: CGPointMake(-5.9, -5.58))
        rectangle12Path.addCurveToPoint(CGPointMake(-3.97, 13), controlPoint1: CGPointMake(-5.9, 3.75), controlPoint2: CGPointMake(-3.97, 13))
        rectangle12Path.addLineToPoint(CGPointMake(-5.9, 13))
        rectangle12Path.addCurveToPoint(CGPointMake(-7.39, 6.1), controlPoint1: CGPointMake(-5.9, 13), controlPoint2: CGPointMake(-6.72, 9.74))
        rectangle12Path.addCurveToPoint(CGPointMake(-8.23, -1), controlPoint1: CGPointMake(-7.84, 3.61), controlPoint2: CGPointMake(-8.23, 0.94))
        rectangle12Path.addCurveToPoint(CGPointMake(-5.9, -15), controlPoint1: CGPointMake(-8.23, -5.54), controlPoint2: CGPointMake(-5.9, -15))
        rectangle12Path.addLineToPoint(CGPointMake(-3.97, -15))
        rectangle12Path.closePath()
        rectangle12Path.miterLimit = 4;

        rectangle12Path.usesEvenOddFillRule = true;

        fillColor7.setFill()
        rectangle12Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawSearchtab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.52379 * frame.width, frame.minY + 0.51089 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Path-82 Drawing
        let path82Path = UIBezierPath()
        path82Path.moveToPoint(CGPointMake(6.59, 6.58))
        path82Path.addLineToPoint(CGPointMake(13.19, 14.54))
        path82Path.miterLimit = 4;

        path82Path.lineCapStyle = .Round;

        path82Path.lineJoinStyle = .Round;

        path82Path.usesEvenOddFillRule = true;

        strokeColor3.setStroke()
        path82Path.lineWidth = 3.5
        path82Path.stroke()


        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-13.19, -14.54, 23, 23))
        strokeColor3.setStroke()
        oval77Path.lineWidth = 3.5
        oval77Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawTrendingtab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-700 Drawing
        let rectangle700Path = UIBezierPath(roundedRect: CGRectMake(-18, 0.94, 12.92, 3.75), cornerRadius: 1.88)
        fillColor3.setFill()
        rectangle700Path.fill()


        //// Rectangle-700-Copy Drawing
        let rectangle700CopyPath = UIBezierPath(roundedRect: CGRectMake(-18, -14.06, 20.31, 3.75), cornerRadius: 1.88)
        fillColor3.setFill()
        rectangle700CopyPath.fill()


        //// Rectangle-700-Copy-2 Drawing
        let rectangle700Copy2Path = UIBezierPath(roundedRect: CGRectMake(-18, -6.56, 20.31, 3.75), cornerRadius: 1.88)
        fillColor3.setFill()
        rectangle700Copy2Path.fill()


        //// Oval-117-Copy Drawing
        let oval117CopyPath = UIBezierPath(ovalInRect: CGRectMake(-1.35, 1.9, 12.9, 13.1))
        fillColor3.setFill()
        oval117CopyPath.fill()


        //// Path-118 Drawing
        let path118Path = UIBezierPath()
        path118Path.moveToPoint(CGPointMake(18, -15))
        path118Path.addLineToPoint(CGPointMake(9.79, -11))
        path118Path.addLineToPoint(CGPointMake(9.79, 8.25))
        path118Path.miterLimit = 4;

        path118Path.lineCapStyle = .Round;

        path118Path.lineJoinStyle = .Round;

        path118Path.usesEvenOddFillRule = true;

        strokeColor3.setStroke()
        path118Path.lineWidth = 3.5
        path118Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawFavoritestab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false, favorited: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let favoriteIconColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let strokeColor = selected ? highlightedColor : color
        let favoritedIconColor = favorited ? favoriteIconColor : strokeColor

        //// star Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.51000 * frame.height)
        CGContextScaleCTM(context, scale, scale)

        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(-0.08, 7.5))
        starPath.addLineToPoint(CGPointMake(-9.4, 14))
        starPath.addLineToPoint(CGPointMake(-6.12, 3.11))
        starPath.addLineToPoint(CGPointMake(-15.17, -3.76))
        starPath.addLineToPoint(CGPointMake(-3.81, -4))
        starPath.addLineToPoint(CGPointMake(-0.08, -14.74))
        starPath.addLineToPoint(CGPointMake(3.65, -4))
        starPath.addLineToPoint(CGPointMake(15, -3.76))
        starPath.addLineToPoint(CGPointMake(5.95, 3.11))
        starPath.addLineToPoint(CGPointMake(9.24, 14))
        starPath.addLineToPoint(CGPointMake(-0.08, 7.5))
        starPath.closePath()
        starPath.miterLimit = 4;

        starPath.lineCapStyle = .Round;

        starPath.lineJoinStyle = .Round;

        starPath.usesEvenOddFillRule = true;

        favoritedIconColor.setFill()
        starPath.fill()
        favoritedIconColor.setStroke()
        starPath.lineWidth = 4
        starPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawRecentstab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-16, -16, 32, 32))
        strokeColor3.setStroke()
        oval77Path.lineWidth = 3.5
        oval77Path.stroke()


        //// Rectangle-1038 Drawing
        let rectangle1038Path = UIBezierPath(roundedRect: CGRectMake(-2, -9, 3.5, 11.75), cornerRadius: 1.75)
        fillColor3.setFill()
        rectangle1038Path.fill()


        //// Rectangle-1038-Copy Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, -2, 3)
        CGContextRotateCTM(context, -90 * CGFloat(M_PI) / 180)

        let rectangle1038CopyPath = UIBezierPath()
        rectangle1038CopyPath.moveToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(3.5, 1.97), controlPoint1: CGPointMake(2.72, 0), controlPoint2: CGPointMake(3.5, 0.88))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(3.5, 1.97))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(3.5, 1.97))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(3.5, 4.5))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(3.5, 7.03), controlPoint1: CGPointMake(3.5, 7.03), controlPoint2: CGPointMake(3.5, 7.03))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(3.5, 7.03))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(1.75, 9), controlPoint1: CGPointMake(3.5, 8.12), controlPoint2: CGPointMake(2.72, 9))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, 9))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, 9))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, 9))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, 9))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, 9))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(0, 7.03), controlPoint1: CGPointMake(0.78, 9), controlPoint2: CGPointMake(-0, 8.12))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(0, 7.03))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(0, 7.03))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(0, 4.5))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(0, 1.97), controlPoint1: CGPointMake(0, 1.97), controlPoint2: CGPointMake(0, 1.97))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(0, 1.97))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(1.75, -0), controlPoint1: CGPointMake(0, 0.88), controlPoint2: CGPointMake(0.78, -0))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.closePath()
        fillColor3.setFill()
        rectangle1038CopyPath.fill()

        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

    public class func drawBackarrow(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))

        //// Variable Declarations
        let strokeColor = selected ? highlightedColor : color

        //// arrow Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50500 * frame.width, frame.minY + 0.49700 * frame.height)
        CGContextScaleCTM(context, scale, scale)

        let arrowPath = UIBezierPath()
        arrowPath.moveToPoint(CGPointMake(6.5, 11.7))
        arrowPath.addLineToPoint(CGPointMake(-6.5, 0))
        arrowPath.addLineToPoint(CGPointMake(6.5, -11.7))
        arrowPath.miterLimit = 4;

        arrowPath.lineCapStyle = .Round;

        arrowPath.lineJoinStyle = .Round;

        arrowPath.usesEvenOddFillRule = true;

        strokeColor.setStroke()
        arrowPath.lineWidth = 5
        arrowPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawHotness(scale scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor9 = UIColor(red: 0.970, green: 0.730, blue: 0.233, alpha: 1.000)

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 6, 7)
        CGContextScaleCTM(context, scale, scale)



        //// flames Drawing
        let flamesPath = UIBezierPath()
        flamesPath.moveToPoint(CGPointMake(frame.minX + 0.15, frame.minY + 18.13))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 8.48, frame.minY + 29.26), controlPoint1: CGPointMake(frame.minX - 1, frame.minY + 25.32), controlPoint2: CGPointMake(frame.minX + 5.16, frame.minY + 28.33))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 9.34, frame.minY + 18.56), controlPoint1: CGPointMake(frame.minX + 8.48, frame.minY + 29.26), controlPoint2: CGPointMake(frame.minX + 2.96, frame.minY + 23.14))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 18.05, frame.minY + 30), controlPoint1: CGPointMake(frame.minX + 10.58, frame.minY + 23.84), controlPoint2: CGPointMake(frame.minX + 13.73, frame.minY + 30))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 21.38, frame.minY + 10), controlPoint1: CGPointMake(frame.minX + 22.38, frame.minY + 30), controlPoint2: CGPointMake(frame.minX + 27.11, frame.minY + 18.08))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 15.93, frame.minY + 16.51), controlPoint1: CGPointMake(frame.minX + 18.82, frame.minY + 15.44), controlPoint2: CGPointMake(frame.minX + 15.93, frame.minY + 16.51))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 10.96, frame.minY), controlPoint1: CGPointMake(frame.minX + 15.93, frame.minY + 16.51), controlPoint2: CGPointMake(frame.minX + 19.5, frame.minY + 6.38))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 0.15, frame.minY + 18.13), controlPoint1: CGPointMake(frame.minX + 8.48, frame.minY + 9.19), controlPoint2: CGPointMake(frame.minX + 1.3, frame.minY + 10.94))
        flamesPath.closePath()
        flamesPath.miterLimit = 4;

        flamesPath.usesEvenOddFillRule = true;

        fillColor9.setFill()
        flamesPath.fill()



        CGContextRestoreGState(context)
    }

    public class func drawCanvas1(frame frame: CGRect = CGRectMake(102, 96, 265, 276)) {
        //// Color Declarations
        let fillColor = UIColor(red: 0.072, green: 0.114, blue: 0.222, alpha: 1.000)

        //// path Drawing
        let pathPath = UIBezierPath()
        pathPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.01428 * frame.height))
        pathPath.addCurveToPoint(CGPointMake(frame.minX + 0.01481 * frame.width, frame.minY + -0.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00639 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.00665 * frame.width, frame.minY + -0.00000 * frame.height))
        pathPath.addLineToPoint(CGPointMake(frame.minX + 0.98519 * frame.width, frame.minY + -0.00000 * frame.height))
        pathPath.addCurveToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.01428 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.99337 * frame.width, frame.minY + -0.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00640 * frame.height))
        pathPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.85646 * frame.height))
        pathPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        pathPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.01428 * frame.height))
        pathPath.closePath()
        pathPath.miterLimit = 4;

        pathPath.usesEvenOddFillRule = true;

        fillColor.setFill()
        pathPath.fill()
    }

    //// Generated Images

    public class func imageOfBackspace(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawBackspace(color: color, keySize: keySize)

        let imageOfBackspace = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBackspace
    }

    public class func imageOfArrowup(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawArrowup(color: color, keySize: keySize)

        let imageOfArrowup = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfArrowup
    }

    public class func imageOfSearch(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSearch(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfSearch = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSearch
    }

    public class func imageOfArrowheadup(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), borderWidth: CGFloat = 2) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawArrowheadup(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, borderWidth: borderWidth)

        let imageOfArrowheadup = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfArrowheadup
    }

    public class func imageOfShare(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawShare(color: color)

        let imageOfShare = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfShare
    }

    public class func imageOfClose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawClose(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfClose = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfClose
    }

    public class func imageOfButtonclose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawButtonclose(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfButtonclose = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfButtonclose
    }

    public class func imageOfFavorite(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false, favorited: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawFavorite(color: color, scale: scale, selected: selected, favorited: favorited)

        let imageOfFavorite = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFavorite
    }

    public class func imageOfFavoritedstate(frame frame: CGRect = CGRectMake(0, 0, 62, 62), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawFavoritedstate(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfFavoritedstate = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFavoritedstate
    }

    public class func imageOfRefresharrow(frame frame: CGRect = CGRectMake(4, 2, 22, 26), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawRefresharrow(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfRefresharrow = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfRefresharrow
    }

    public class func imageOfTrash(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawTrash(color: color, scale: scale, selected: selected)

        let imageOfTrash = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfTrash
    }

    public class func imageOfClipboard(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawClipboard(color: color, scale: scale, selected: selected)

        let imageOfClipboard = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfClipboard
    }

    public class func imageOfCheckmark(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawCheckmark(color: color, scale: scale, selected: selected)

        let imageOfCheckmark = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCheckmark
    }

    public class func imageOfCancel(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawCancel(color: color, scale: scale, selected: selected)

        let imageOfCancel = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCancel
    }

    public class func imageOfInsert(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawInsert(color: color, scale: scale, selected: selected)

        let imageOfInsert = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfInsert
    }

    public class func imageOfKeyboard(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawKeyboard(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfKeyboard = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfKeyboard
    }

    public class func imageOfUndo(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawUndo(color: color, scale: scale, selected: selected)

        let imageOfUndo = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfUndo
    }

    public class func imageOfClosebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawClosebutton(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfClosebutton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfClosebutton
    }

    public class func imageOfSearchbaricon(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSearchbaricon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfSearchbaricon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSearchbaricon
    }

    public class func imageOfSharebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSharebutton(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfSharebutton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSharebutton
    }

    public class func imageOfSettings(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawSettings(color: color, scale: scale, selected: selected)

        let imageOfSettings = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSettings
    }

    public class func imageOfTrending(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawTrending(color: color, scale: scale, selected: selected)

        let imageOfTrending = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfTrending
    }

    public class func imageOfProfile(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawProfile(color: color, scale: scale, selected: selected)

        let imageOfProfile = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfProfile
    }

    public class func imageOfGlobebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawGlobebutton(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfGlobebutton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGlobebutton
    }

    public class func imageOfSearchtab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSearchtab(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfSearchtab = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSearchtab
    }

    public class func imageOfTrendingtab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawTrendingtab(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfTrendingtab = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfTrendingtab
    }

    public class func imageOfFavoritestab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false, favorited: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawFavoritestab(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale, selected: selected, favorited: favorited)

        let imageOfFavoritestab = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFavoritestab
    }

    public class func imageOfRecentstab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawRecentstab(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfRecentstab = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfRecentstab
    }

    public class func imageOfBackarrow(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawBackarrow(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale, selected: selected)

        let imageOfBackarrow = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBackarrow
    }

    public class func imageOfHotness(scale scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(24, 30), false, 0)
            StyleKit.drawHotness(scale: scale)

        let imageOfHotness = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfHotness
    }

}

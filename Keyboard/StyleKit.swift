//
//  StyleKit.swift
//  Often
//
//  Created by Luc Succes on 3/29/16.
//  Copyright (c) 2016 Project Surf Inc. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Drawing Methods

    public class func drawBackspace(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Frames
        let frame = CGRectMake(keySize.origin.x, keySize.origin.y, keySize.size.width, keySize.size.height)


        //// Icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.14286 * frame.width, frame.minY + 0.20000 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)

        CGContextSetBlendMode(context, .Multiply)
        CGContextBeginTransparencyLayer(context, nil)


        //// arrow-icon
        //// head Drawing
        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(22.95, 33.31))
        headPath.addLineToPoint(CGPointMake(9.75, 20.28))
        headPath.addLineToPoint(CGPointMake(22.6, 7.97))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()


        //// tail Drawing
        let tailPath = UIBezierPath()
        tailPath.moveToPoint(CGPointMake(9.71, 20.43))
        tailPath.addLineToPoint(CGPointMake(47.94, 20.4))
        tailPath.miterLimit = 4;

        tailPath.usesEvenOddFillRule = true;

        color.setStroke()
        tailPath.lineWidth = 3
        tailPath.stroke()




        //// Bar Drawing
        let barPath = UIBezierPath(rect: CGRectMake(0, 0, 3, 40))
        color.setFill()
        barPath.fill()


        CGContextEndTransparencyLayer(context)

        CGContextRestoreGState(context)
    }

    public class func drawArrowup(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Frames
        let frame = CGRectMake(keySize.origin.x, keySize.origin.y, keySize.size.width, keySize.size.height)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48571 * frame.width, frame.minY + 0.49335 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// head Drawing
        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(-12.67, -5.88))
        headPath.addLineToPoint(CGPointMake(0.36, -19.07))
        headPath.addLineToPoint(CGPointMake(12.67, -6.22))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()


        //// tail Drawing
        let tailPath = UIBezierPath()
        tailPath.moveToPoint(CGPointMake(0.21, -19.11))
        tailPath.addLineToPoint(CGPointMake(0.24, 19.11))
        tailPath.miterLimit = 4;

        tailPath.usesEvenOddFillRule = true;

        color.setStroke()
        tailPath.lineWidth = 3
        tailPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawSearch(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// search
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.57045 * frame.width, frame.minY + 0.58812 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Path-82 Drawing
        let path82Path = UIBezierPath()
        path82Path.moveToPoint(CGPointMake(1.45, 1.32))
        path82Path.addLineToPoint(CGPointMake(8.97, 10.58))
        path82Path.miterLimit = 4;

        path82Path.usesEvenOddFillRule = true;

        color.setStroke()
        path82Path.lineWidth = 3
        path82Path.stroke()


        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-13.97, -15.58, 19, 18))
        color.setStroke()
        oval77Path.lineWidth = 3
        oval77Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawArrowheadup(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, borderWidth: CGFloat = 2) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// head Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48860 * frame.width, frame.minY + 0.47676 * frame.height)
        CGContextScaleCTM(context, scale, scale)

        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(-10.9, 5.31))
        headPath.addLineToPoint(CGPointMake(-0, -5.31))
        headPath.addLineToPoint(CGPointMake(10.9, 5.29))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = borderWidth
        headPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawShare(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// share
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 13.16, 10.3)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// square Drawing
        let squarePath = UIBezierPath()
        squarePath.moveToPoint(CGPointMake(7.79, 15.53))
        squarePath.addLineToPoint(CGPointMake(15.39, 15.45))
        squarePath.addLineToPoint(CGPointMake(15.39, 30.11))
        squarePath.addLineToPoint(CGPointMake(0.73, 30.11))
        squarePath.addLineToPoint(CGPointMake(0.73, 15.45))
        squarePath.addLineToPoint(CGPointMake(7.79, 15.53))
        squarePath.closePath()
        squarePath.miterLimit = 4;

        squarePath.usesEvenOddFillRule = true;

        color.setStroke()
        squarePath.lineWidth = 3
        squarePath.stroke()


        //// line Drawing
        let linePath = UIBezierPath()
        linePath.moveToPoint(CGPointMake(8.08, 1.15))
        linePath.addLineToPoint(CGPointMake(8.01, 15.97))
        linePath.miterLimit = 4;

        linePath.usesEvenOddFillRule = true;

        color.setStroke()
        linePath.lineWidth = 3
        linePath.stroke()


        //// head Drawing
        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(0, 8.08))
        headPath.addLineToPoint(CGPointMake(7.99, 0))
        headPath.addLineToPoint(CGPointMake(15.98, 8.07))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawClose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// close
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48651 * frame.width, frame.minY + 0.48646 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// rightBar Drawing
        CGContextSaveGState(context)

        let rightBarPath = UIBezierPath()
        rightBarPath.moveToPoint(CGPointMake(15.97, -11.31))
        rightBarPath.addLineToPoint(CGPointMake(11.98, -15.08))
        rightBarPath.addLineToPoint(CGPointMake(-15.97, 11.31))
        rightBarPath.addLineToPoint(CGPointMake(-11.98, 15.08))
        rightBarPath.addLineToPoint(CGPointMake(15.97, -11.31))
        rightBarPath.addLineToPoint(CGPointMake(15.97, -11.31))
        rightBarPath.closePath()
        rightBarPath.miterLimit = 4;

        rightBarPath.usesEvenOddFillRule = true;

        color.setFill()
        rightBarPath.fill()

        CGContextRestoreGState(context)


        //// leftBar Drawing
        CGContextSaveGState(context)

        let leftBarPath = UIBezierPath()
        leftBarPath.moveToPoint(CGPointMake(-15.97, -11.31))
        leftBarPath.addLineToPoint(CGPointMake(-11.98, -15.08))
        leftBarPath.addLineToPoint(CGPointMake(15.97, 11.31))
        leftBarPath.addLineToPoint(CGPointMake(11.98, 15.08))
        leftBarPath.addLineToPoint(CGPointMake(-15.97, -11.31))
        leftBarPath.addLineToPoint(CGPointMake(-15.97, -11.31))
        leftBarPath.closePath()
        leftBarPath.miterLimit = 4;

        leftBarPath.usesEvenOddFillRule = true;

        color.setFill()
        leftBarPath.fill()

        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

    public class func drawButtonclose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// close 2
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.51429 * frame.width, frame.minY + 0.50159 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-406 Drawing
        let rectangle406Path = UIBezierPath()
        rectangle406Path.moveToPoint(CGPointMake(-7.99, -5.66))
        rectangle406Path.addLineToPoint(CGPointMake(-5.99, -7.54))
        rectangle406Path.addLineToPoint(CGPointMake(7.99, 5.66))
        rectangle406Path.addLineToPoint(CGPointMake(5.99, 7.54))
        rectangle406Path.addLineToPoint(CGPointMake(-7.99, -5.66))
        rectangle406Path.addLineToPoint(CGPointMake(-7.99, -5.66))
        rectangle406Path.closePath()
        rectangle406Path.miterLimit = 4;

        rectangle406Path.usesEvenOddFillRule = true;

        color.setFill()
        rectangle406Path.fill()


        //// Rectangle-407 Drawing
        let rectangle407Path = UIBezierPath()
        rectangle407Path.moveToPoint(CGPointMake(7.99, -5.66))
        rectangle407Path.addLineToPoint(CGPointMake(5.99, -7.54))
        rectangle407Path.addLineToPoint(CGPointMake(-7.99, 5.66))
        rectangle407Path.addLineToPoint(CGPointMake(-5.99, 7.54))
        rectangle407Path.addLineToPoint(CGPointMake(7.99, -5.66))
        rectangle407Path.addLineToPoint(CGPointMake(7.99, -5.66))
        rectangle407Path.closePath()
        rectangle407Path.miterLimit = 4;

        rectangle407Path.usesEvenOddFillRule = true;

        color.setFill()
        rectangle407Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawFavorite(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false, favorited: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let tealColor = UIColor(red: 0.145, green: 0.780, blue: 0.530, alpha: 1.000)

        //// Variable Declarations
        let strokeColor = selected ? highlightedColor : color
        let favoritedFillColor = favorited ? tealColor : noneColor
        let favoritedIconColor = favorited ? tealColor : strokeColor
        let favoritedStrokeColor = favorited ? tealColor : strokeColor

        //// Frames
        let frame = CGRectMake(0, -0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 11.5, frame.minY + 8, 80.5, 80.5))
        favoritedFillColor.setFill()
        circlePath.fill()
        favoritedStrokeColor.setStroke()
        circlePath.lineWidth = 3
        circlePath.stroke()


        //// star Drawing
        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(51.92, 54.5))
        starPath.addLineToPoint(CGPointMake(42.6, 61))
        starPath.addLineToPoint(CGPointMake(45.88, 50.11))
        starPath.addLineToPoint(CGPointMake(frame.minX + 36.83, frame.minY + 43.24))
        starPath.addLineToPoint(CGPointMake(frame.minX + 48.19, frame.minY + 43))
        starPath.addLineToPoint(CGPointMake(51.92, 32.26))
        starPath.addLineToPoint(CGPointMake(55.65, 43))
        starPath.addLineToPoint(CGPointMake(67, 43.24))
        starPath.addLineToPoint(CGPointMake(57.95, 50.11))
        starPath.addLineToPoint(CGPointMake(61.24, 61))
        starPath.addLineToPoint(CGPointMake(51.92, 54.5))
        starPath.closePath()
        starPath.miterLimit = 4;

        starPath.lineCapStyle = .Round;

        starPath.lineJoinStyle = .Round;

        starPath.usesEvenOddFillRule = true;

        favoritedIconColor.setFill()
        starPath.fill()
        favoritedIconColor.setStroke()
        starPath.lineWidth = 4
        starPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawFavoritedstate(frame frame: CGRect = CGRectMake(0, 0, 62, 62), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let tealColor = UIColor(red: 0.145, green: 0.780, blue: 0.530, alpha: 1.000)
        let favoriteIconColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        var favoriteIconColorHueComponent: CGFloat = 1,
            favoriteIconColorSaturationComponent: CGFloat = 1,
            favoriteIconColorBrightnessComponent: CGFloat = 1
        favoriteIconColor.getHue(&favoriteIconColorHueComponent, saturation: &favoriteIconColorSaturationComponent, brightness: &favoriteIconColorBrightnessComponent, alpha: nil)

        let fillColor2 = UIColor(hue: favoriteIconColorHueComponent, saturation: 0, brightness: favoriteIconColorBrightnessComponent, alpha: CGColorGetAlpha(favoriteIconColor.CGColor))

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 62, frame.minY + 62)
        CGContextScaleCTM(context, scale, scale)



        //// triangle Drawing
        let trianglePath = UIBezierPath()
        trianglePath.moveToPoint(CGPointMake(0, -62))
        trianglePath.addLineToPoint(CGPointMake(-0, -0))
        trianglePath.addLineToPoint(CGPointMake(-62, 0))
        trianglePath.addLineToPoint(CGPointMake(0, -62))
        trianglePath.closePath()
        trianglePath.miterLimit = 4;

        trianglePath.usesEvenOddFillRule = true;

        tealColor.setFill()
        trianglePath.fill()


        //// star Drawing
        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(-18.75, -30.85))
        starPath.addLineToPoint(CGPointMake(-16.1, -23.19))
        starPath.addLineToPoint(CGPointMake(-8, -23.04))
        starPath.addLineToPoint(CGPointMake(-14.47, -18.16))
        starPath.addLineToPoint(CGPointMake(-12.11, -10.41))
        starPath.addLineToPoint(CGPointMake(-18.75, -15.05))
        starPath.addLineToPoint(CGPointMake(-25.39, -10.41))
        starPath.addLineToPoint(CGPointMake(-23.03, -18.16))
        starPath.addLineToPoint(CGPointMake(-29.5, -23.04))
        starPath.addLineToPoint(CGPointMake(-21.4, -23.19))
        starPath.closePath()
        fillColor2.setFill()
        starPath.fill()



        CGContextRestoreGState(context)
    }

    public class func drawRefresharrow(frame frame: CGRect = CGRectMake(4, 2, 22, 26), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let favoriteIconColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        var favoriteIconColorHueComponent: CGFloat = 1,
            favoriteIconColorSaturationComponent: CGFloat = 1,
            favoriteIconColorBrightnessComponent: CGFloat = 1
        favoriteIconColor.getHue(&favoriteIconColorHueComponent, saturation: &favoriteIconColorSaturationComponent, brightness: &favoriteIconColorBrightnessComponent, alpha: nil)

        let fillColor2 = UIColor(hue: favoriteIconColorHueComponent, saturation: 0, brightness: favoriteIconColorBrightnessComponent, alpha: CGColorGetAlpha(favoriteIconColor.CGColor))

        //// arrow
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.52273 * frame.width, frame.minY + 0.50962 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-1306 Drawing
        let rectangle1306Path = UIBezierPath(rect: CGRectMake(-2, -9.5, 4, 21))
        fillColor2.setFill()
        rectangle1306Path.fill()


        //// Path-319 Drawing
        let path319Path = UIBezierPath()
        path319Path.moveToPoint(CGPointMake(-9, -2.5))
        path319Path.addLineToPoint(CGPointMake(0, -11.5))
        path319Path.addLineToPoint(CGPointMake(9, -2.5))
        path319Path.miterLimit = 4;

        path319Path.usesEvenOddFillRule = true;

        strokeColor2.setStroke()
        path319Path.lineWidth = 4
        path319Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawTrash(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// delete
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 4)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// Path-924 Drawing
        let path924Path = UIBezierPath()
        path924Path.moveToPoint(CGPointMake(frame.minX + 25, frame.minY + 33.59))
        path924Path.addLineToPoint(CGPointMake(31.97, 60.62))
        path924Path.addLineToPoint(CGPointMake(52, 60.62))
        path924Path.addLineToPoint(CGPointMake(58, 33.59))
        path924Path.addLineToPoint(CGPointMake(frame.minX + 25, frame.minY + 33.59))
        path924Path.closePath()
        path924Path.miterLimit = 4;

        path924Path.lineCapStyle = .Round;

        path924Path.lineJoinStyle = .Round;

        path924Path.usesEvenOddFillRule = true;

        selectedFillColor.setFill()
        path924Path.fill()
        selectedHighlightColor.setStroke()
        path924Path.lineWidth = 4
        path924Path.stroke()


        //// Path-925 Drawing
        let path925Path = UIBezierPath()
        path925Path.moveToPoint(CGPointMake(frame.minX + 27, frame.minY + 25.5))
        path925Path.addLineToPoint(CGPointMake(55, 25.5))
        path925Path.miterLimit = 4;

        path925Path.lineCapStyle = .Round;

        path925Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path925Path.lineWidth = 4
        path925Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawClipboard(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// copy
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 4)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// Path-926 Drawing
        let path926Path = UIBezierPath()
        path926Path.moveToPoint(CGPointMake(52.48, 44.61))
        path926Path.addLineToPoint(CGPointMake(52.48, 28.39))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 42.46, frame.minY + 19), controlPoint1: CGPointMake(52.48, 28.39), controlPoint2: CGPointMake(frame.minX + 53.34, frame.minY + 19))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 32, frame.minY + 28.39), controlPoint1: CGPointMake(frame.minX + 31.57, frame.minY + 19), controlPoint2: CGPointMake(frame.minX + 32, frame.minY + 28.39))
        path926Path.addLineToPoint(CGPointMake(32, 56.56))
        path926Path.addCurveToPoint(CGPointMake(38.83, 63.38), controlPoint1: CGPointMake(32, 56.56), controlPoint2: CGPointMake(31.86, 63.38))
        path926Path.addCurveToPoint(CGPointMake(45.94, 56.56), controlPoint1: CGPointMake(45.8, 63.38), controlPoint2: CGPointMake(45.94, 56.56))
        path926Path.addLineToPoint(CGPointMake(frame.minX + 45.94, frame.minY + 31.8))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 42.46, frame.minY + 27.54), controlPoint1: CGPointMake(frame.minX + 45.94, frame.minY + 31.8), controlPoint2: CGPointMake(frame.minX + 46.51, frame.minY + 27.54))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 38.83, frame.minY + 31.8), controlPoint1: CGPointMake(frame.minX + 38.4, frame.minY + 27.54), controlPoint2: CGPointMake(frame.minX + 38.83, frame.minY + 31.8))
        path926Path.addLineToPoint(CGPointMake(38.83, 54.85))
        path926Path.miterLimit = 4;

        path926Path.lineCapStyle = .Round;

        path926Path.lineJoinStyle = .Round;

        path926Path.usesEvenOddFillRule = true;

        selectedFillColor.setFill()
        path926Path.fill()
        selectedHighlightColor.setStroke()
        path926Path.lineWidth = 4
        path926Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawCheckmark(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(-1.5, -1.5, 50, 50)


        //// shape
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 5.75, 4.75)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        circlePath.fill()
        strokeColor.setStroke()
        circlePath.lineWidth = 3
        circlePath.stroke()


        //// check Drawing
        let checkPath = UIBezierPath()
        checkPath.moveToPoint(CGPointMake(frame.minX + 25, frame.minY + 43))
        checkPath.addLineToPoint(CGPointMake(35.5, 53.5))
        checkPath.addLineToPoint(CGPointMake(58.5, 27.5))
        checkPath.miterLimit = 4;

        checkPath.lineCapStyle = .Round;

        checkPath.lineJoinStyle = .Round;

        checkPath.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        checkPath.lineWidth = 4
        checkPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawCancel(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 4)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        circlePath.fill()
        strokeColor.setStroke()
        circlePath.lineWidth = 3
        circlePath.stroke()


        //// cancelIcon Drawing
        let cancelIconPath = UIBezierPath()
        cancelIconPath.moveToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 38.67))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 31.6, frame.minY + 28.77))
        cancelIconPath.addCurveToPoint(CGPointMake(frame.minX + 28.77, frame.minY + 28.77), controlPoint1: CGPointMake(frame.minX + 30.82, frame.minY + 27.99), controlPoint2: CGPointMake(frame.minX + 29.55, frame.minY + 27.99))
        cancelIconPath.addCurveToPoint(CGPointMake(frame.minX + 28.77, frame.minY + 31.6), controlPoint1: CGPointMake(frame.minX + 27.99, frame.minY + 29.56), controlPoint2: CGPointMake(frame.minX + 27.99, frame.minY + 30.82))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 38.67, frame.minY + 41.5))
        cancelIconPath.addLineToPoint(CGPointMake(28.77, 51.4))
        cancelIconPath.addCurveToPoint(CGPointMake(28.77, 54.23), controlPoint1: CGPointMake(27.99, 52.18), controlPoint2: CGPointMake(27.99, 53.44))
        cancelIconPath.addCurveToPoint(CGPointMake(31.6, 54.23), controlPoint1: CGPointMake(29.55, 55.01), controlPoint2: CGPointMake(30.82, 55.01))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 44.33))
        cancelIconPath.addLineToPoint(CGPointMake(51.4, 54.23))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 54.23), controlPoint1: CGPointMake(52.18, 55.01), controlPoint2: CGPointMake(53.45, 55.01))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 51.4), controlPoint1: CGPointMake(55.01, 53.44), controlPoint2: CGPointMake(55.01, 52.18))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 44.33, frame.minY + 41.5))
        cancelIconPath.addLineToPoint(CGPointMake(54.23, 31.6))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 28.77), controlPoint1: CGPointMake(55.01, 30.82), controlPoint2: CGPointMake(55.01, 29.56))
        cancelIconPath.addCurveToPoint(CGPointMake(51.4, 28.77), controlPoint1: CGPointMake(53.45, 27.99), controlPoint2: CGPointMake(52.18, 27.99))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 38.67))
        cancelIconPath.closePath()
        cancelIconPath.miterLimit = 4;

        cancelIconPath.usesEvenOddFillRule = true;

        selectedHighlightColor.setFill()
        cancelIconPath.fill()



        CGContextRestoreGState(context)
    }

    public class func drawInsert(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 5)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// path-1 Drawing
        let path1Path = UIBezierPath()
        path1Path.moveToPoint(CGPointMake(frame.minX + 30.71, frame.minY + 40.93))
        path1Path.addLineToPoint(CGPointMake(frame.minX + 41.52, frame.minY + 29.93))
        path1Path.addLineToPoint(CGPointMake(51.73, 40.64))
        path1Path.miterLimit = 4;

        path1Path.lineCapStyle = .Round;

        path1Path.lineJoinStyle = .Round;

        path1Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path1Path.lineWidth = 4
        path1Path.stroke()


        //// Path- 2 Drawing
        let path2Path = UIBezierPath()
        path2Path.moveToPoint(CGPointMake(frame.minX + 41.39, frame.minY + 29.89))
        path2Path.addLineToPoint(CGPointMake(41.41, 61.61))
        path2Path.miterLimit = 4;

        path2Path.lineCapStyle = .Round;

        path2Path.lineJoinStyle = .Round;

        path2Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path2Path.lineWidth = 4
        path2Path.stroke()


        //// Path-106 Drawing
        let path106Path = UIBezierPath()
        path106Path.moveToPoint(CGPointMake(frame.minX + 29, frame.minY + 23))
        path106Path.addLineToPoint(CGPointMake(54, 23))
        path106Path.miterLimit = 4;

        path106Path.lineCapStyle = .Round;

        path106Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path106Path.lineWidth = 4
        path106Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawKeyboard(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 18, frame.minY + 17.75)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-608 Drawing
        let rectangle608Path = UIBezierPath(roundedRect: CGRectMake(-16, 1.5, 8, 8), cornerRadius: 2)
        color.setFill()
        rectangle608Path.fill()


        //// Rectangle-608-Copy Drawing
        let rectangle608CopyPath = UIBezierPath(roundedRect: CGRectMake(-4, 1.5, 8, 8), cornerRadius: 2)
        color.setFill()
        rectangle608CopyPath.fill()


        //// Rectangle-608-Copy-2 Drawing
        let rectangle608Copy2Path = UIBezierPath(roundedRect: CGRectMake(8, 1.5, 8, 8), cornerRadius: 2)
        color.setFill()
        rectangle608Copy2Path.fill()


        //// Rectangle-608-Copy-3 Drawing
        let rectangle608Copy3Path = UIBezierPath(roundedRect: CGRectMake(2, -9.5, 8, 8), cornerRadius: 2)
        color.setFill()
        rectangle608Copy3Path.fill()


        //// Rectangle-608-Copy-4 Drawing
        let rectangle608Copy4Path = UIBezierPath(roundedRect: CGRectMake(-10, -9.5, 8, 8), cornerRadius: 2)
        color.setFill()
        rectangle608Copy4Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawUndo(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 5.5, 4.5)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// Path-931 Drawing
        let path931Path = UIBezierPath()
        path931Path.moveToPoint(CGPointMake(28.25, 26.64))
        path931Path.addLineToPoint(CGPointMake(18.89, 36.12))
        path931Path.addLineToPoint(CGPointMake(28.25, 44.36))
        path931Path.miterLimit = 4;

        path931Path.lineCapStyle = .Round;

        path931Path.lineJoinStyle = .Round;

        path931Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path931Path.lineWidth = 4
        path931Path.stroke()


        //// Path-145 Drawing
        let path145Path = UIBezierPath()
        path145Path.moveToPoint(CGPointMake(42.5, 51.5))
        path145Path.addLineToPoint(CGPointMake(54.5, 51.5))
        path145Path.addCurveToPoint(CGPointMake(62.5, 43.5), controlPoint1: CGPointMake(54.5, 51.5), controlPoint2: CGPointMake(62.5, 51.21))
        path145Path.addCurveToPoint(CGPointMake(54.5, 35.5), controlPoint1: CGPointMake(62.5, 35.79), controlPoint2: CGPointMake(54.5, 35.5))
        path145Path.addLineToPoint(CGPointMake(19.5, 35.5))
        path145Path.miterLimit = 4;

        path145Path.lineCapStyle = .Round;

        path145Path.lineJoinStyle = .Round;

        path145Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path145Path.lineWidth = 4
        path145Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawClosebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor6 = UIColor(red: 0.812, green: 0.812, blue: 0.812, alpha: 0.540)
        let fillColor7 = UIColor(red: 0.383, green: 0.383, blue: 0.387, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-35, -35, 70, 70))
        fillColor6.setFill()
        oval77Path.fill()


        //// Rectangle-614 Drawing
        let rectangle614Path = UIBezierPath()
        rectangle614Path.moveToPoint(CGPointMake(2.83, -1))
        rectangle614Path.addLineToPoint(CGPointMake(10.61, -8.78))
        rectangle614Path.addCurveToPoint(CGPointMake(10.61, -11.61), controlPoint1: CGPointMake(11.39, -9.56), controlPoint2: CGPointMake(11.39, -10.83))
        rectangle614Path.addCurveToPoint(CGPointMake(7.78, -11.61), controlPoint1: CGPointMake(9.82, -12.39), controlPoint2: CGPointMake(8.56, -12.39))
        rectangle614Path.addLineToPoint(CGPointMake(0, -3.83))
        rectangle614Path.addLineToPoint(CGPointMake(-7.78, -11.61))
        rectangle614Path.addCurveToPoint(CGPointMake(-10.61, -11.61), controlPoint1: CGPointMake(-8.56, -12.39), controlPoint2: CGPointMake(-9.83, -12.39))
        rectangle614Path.addCurveToPoint(CGPointMake(-10.61, -8.78), controlPoint1: CGPointMake(-11.39, -10.82), controlPoint2: CGPointMake(-11.39, -9.56))
        rectangle614Path.addLineToPoint(CGPointMake(-2.83, -1))
        rectangle614Path.addLineToPoint(CGPointMake(-10.61, 6.78))
        rectangle614Path.addCurveToPoint(CGPointMake(-10.61, 9.61), controlPoint1: CGPointMake(-11.39, 7.56), controlPoint2: CGPointMake(-11.39, 8.83))
        rectangle614Path.addCurveToPoint(CGPointMake(-7.78, 9.61), controlPoint1: CGPointMake(-9.82, 10.39), controlPoint2: CGPointMake(-8.56, 10.39))
        rectangle614Path.addLineToPoint(CGPointMake(0, 1.83))
        rectangle614Path.addLineToPoint(CGPointMake(7.78, 9.61))
        rectangle614Path.addCurveToPoint(CGPointMake(10.61, 9.61), controlPoint1: CGPointMake(8.56, 10.39), controlPoint2: CGPointMake(9.83, 10.39))
        rectangle614Path.addCurveToPoint(CGPointMake(10.61, 6.78), controlPoint1: CGPointMake(11.39, 8.82), controlPoint2: CGPointMake(11.39, 7.56))
        rectangle614Path.addLineToPoint(CGPointMake(2.83, -1))
        rectangle614Path.closePath()
        rectangle614Path.miterLimit = 4;

        rectangle614Path.usesEvenOddFillRule = true;

        fillColor7.setFill()
        rectangle614Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawSearchbaricon(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 16.75, frame.minY + 16.5)
        CGContextScaleCTM(context, scale, scale)



        //// Path-82 Drawing
        let path82Path = UIBezierPath()
        path82Path.moveToPoint(CGPointMake(7.28, 9.13))
        path82Path.addLineToPoint(CGPointMake(13.24, 16.32))
        path82Path.miterLimit = 4;

        path82Path.usesEvenOddFillRule = true;

        color.setStroke()
        path82Path.lineWidth = 3
        path82Path.stroke()


        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-11.5, -11, 23, 22))
        color.setStroke()
        oval77Path.lineWidth = 3
        oval77Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawSharebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 18, frame.minY + 17)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-653 Drawing
        let rectangle653Path = UIBezierPath(roundedRect: CGRectMake(-2, -4, 4, 18), cornerRadius: 2)
        color.setFill()
        rectangle653Path.fill()


        //// Rectangle-654 Drawing
        let rectangle654Path = UIBezierPath(roundedRect: CGRectMake(-10, -14, 20, 4), cornerRadius: 2)
        color.setFill()
        rectangle654Path.fill()


        //// Path-153 Drawing
        let path153Path = UIBezierPath()
        path153Path.moveToPoint(CGPointMake(-8, 2))
        path153Path.addLineToPoint(CGPointMake(0, -6))
        path153Path.addLineToPoint(CGPointMake(8, 2))
        path153Path.miterLimit = 4;

        path153Path.lineCapStyle = .Round;

        path153Path.lineJoinStyle = .Round;

        path153Path.usesEvenOddFillRule = true;

        color.setStroke()
        path153Path.lineWidth = 4
        path153Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawSettings(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let mainAppHighlightColor = UIColor(red: 0.692, green: 0.692, blue: 0.692, alpha: 1.000)

        //// Variable Declarations
        let mainAppStrokeColor = selected ? highlightedColor : mainAppHighlightColor

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 11, 7)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-351-Copy Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 30, frame.minY + 33)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let rectangle351CopyPath = UIBezierPath(roundedRect: CGRectMake(-16.62, -16.62, 33.25, 33.25), cornerRadius: 8)
        mainAppStrokeColor.setStroke()
        rectangle351CopyPath.lineWidth = 4
        rectangle351CopyPath.stroke()

        CGContextRestoreGState(context)


        //// Oval-17 Drawing
        let oval17Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 23.4, frame.minY + 26.4, 13.1, 13.1))
        mainAppStrokeColor.setStroke()
        oval17Path.lineWidth = 4
        oval17Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawTrending(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let mainAppHighlightColor = UIColor(red: 0.692, green: 0.692, blue: 0.692, alpha: 1.000)

        //// Variable Declarations
        let mainAppStrokeColor = selected ? highlightedColor : mainAppHighlightColor

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 13, 12)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-344-Copy Drawing
        let rectangle344CopyPath = UIBezierPath()
        rectangle344CopyPath.moveToPoint(CGPointMake(frame.minX + 42, frame.minY + 6.83))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 42, frame.minY + 36))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 40, frame.minY + 38), controlPoint1: CGPointMake(frame.minX + 42, frame.minY + 37.1), controlPoint2: CGPointMake(frame.minX + 41.11, frame.minY + 38))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 38, frame.minY + 36), controlPoint1: CGPointMake(frame.minX + 38.9, frame.minY + 38), controlPoint2: CGPointMake(frame.minX + 38, frame.minY + 37.11))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 38, frame.minY + 6.83))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 29.75, frame.minY + 15.08))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 26.93, frame.minY + 15.07), controlPoint1: CGPointMake(frame.minX + 28.97, frame.minY + 15.86), controlPoint2: CGPointMake(frame.minX + 27.72, frame.minY + 15.86))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 26.92, frame.minY + 12.25), controlPoint1: CGPointMake(frame.minX + 26.15, frame.minY + 14.29), controlPoint2: CGPointMake(frame.minX + 26.15, frame.minY + 13.02))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 38.25, frame.minY + 0.92))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 40, frame.minY + 0.37), controlPoint1: CGPointMake(frame.minX + 38.73, frame.minY + 0.45), controlPoint2: CGPointMake(frame.minX + 39.38, frame.minY + 0.26))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 41.75, frame.minY + 0.92), controlPoint1: CGPointMake(frame.minX + 40.62, frame.minY + 0.26), controlPoint2: CGPointMake(frame.minX + 41.27, frame.minY + 0.45))
        rectangle344CopyPath.addLineToPoint(CGPointMake(53.08, 12.25))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(53.07, 15.07), controlPoint1: CGPointMake(53.85, 13.02), controlPoint2: CGPointMake(53.85, 14.29))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(50.25, 15.08), controlPoint1: CGPointMake(52.28, 15.86), controlPoint2: CGPointMake(51.03, 15.86))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 42, frame.minY + 6.83))
        rectangle344CopyPath.closePath()
        rectangle344CopyPath.moveToPoint(CGPointMake(frame.minX, frame.minY + 26))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 2, frame.minY + 24), controlPoint1: CGPointMake(frame.minX, frame.minY + 24.9), controlPoint2: CGPointMake(frame.minX + 0.89, frame.minY + 24))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 24, frame.minY + 24))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 26, frame.minY + 26), controlPoint1: CGPointMake(frame.minX + 25.11, frame.minY + 24), controlPoint2: CGPointMake(frame.minX + 26, frame.minY + 24.89))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 24, frame.minY + 28), controlPoint1: CGPointMake(frame.minX + 26, frame.minY + 27.1), controlPoint2: CGPointMake(frame.minX + 25.11, frame.minY + 28))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 2, frame.minY + 28))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX, frame.minY + 26), controlPoint1: CGPointMake(frame.minX + 0.89, frame.minY + 28), controlPoint2: CGPointMake(frame.minX, frame.minY + 27.11))
        rectangle344CopyPath.closePath()
        rectangle344CopyPath.moveToPoint(CGPointMake(frame.minX, frame.minY + 16))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 2, frame.minY + 14), controlPoint1: CGPointMake(frame.minX, frame.minY + 14.9), controlPoint2: CGPointMake(frame.minX + 0.89, frame.minY + 14))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 16, frame.minY + 14))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 18, frame.minY + 16), controlPoint1: CGPointMake(frame.minX + 17.11, frame.minY + 14), controlPoint2: CGPointMake(frame.minX + 18, frame.minY + 14.89))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 16, frame.minY + 18), controlPoint1: CGPointMake(frame.minX + 18, frame.minY + 17.1), controlPoint2: CGPointMake(frame.minX + 17.11, frame.minY + 18))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 2, frame.minY + 18))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX, frame.minY + 16), controlPoint1: CGPointMake(frame.minX + 0.89, frame.minY + 18), controlPoint2: CGPointMake(frame.minX, frame.minY + 17.11))
        rectangle344CopyPath.closePath()
        rectangle344CopyPath.moveToPoint(CGPointMake(frame.minX, frame.minY + 37))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 2, frame.minY + 35), controlPoint1: CGPointMake(frame.minX, frame.minY + 35.9), controlPoint2: CGPointMake(frame.minX + 0.89, frame.minY + 35))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 24, frame.minY + 35))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 26, frame.minY + 37), controlPoint1: CGPointMake(frame.minX + 25.11, frame.minY + 35), controlPoint2: CGPointMake(frame.minX + 26, frame.minY + 35.89))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX + 24, frame.minY + 39), controlPoint1: CGPointMake(frame.minX + 26, frame.minY + 38.1), controlPoint2: CGPointMake(frame.minX + 25.11, frame.minY + 39))
        rectangle344CopyPath.addLineToPoint(CGPointMake(frame.minX + 2, frame.minY + 39))
        rectangle344CopyPath.addCurveToPoint(CGPointMake(frame.minX, frame.minY + 37), controlPoint1: CGPointMake(frame.minX + 0.89, frame.minY + 39), controlPoint2: CGPointMake(frame.minX, frame.minY + 38.11))
        rectangle344CopyPath.closePath()
        rectangle344CopyPath.miterLimit = 4;

        rectangle344CopyPath.usesEvenOddFillRule = true;

        mainAppStrokeColor.setFill()
        rectangle344CopyPath.fill()
        mainAppStrokeColor.setStroke()
        rectangle344CopyPath.lineWidth = 1
        rectangle344CopyPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawProfile(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let mainAppHighlightColor = UIColor(red: 0.692, green: 0.692, blue: 0.692, alpha: 1.000)

        //// Variable Declarations
        let mainAppStrokeColor = selected ? highlightedColor : mainAppHighlightColor

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 14, 8)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-17 Drawing
        let oval17Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 13.4, frame.minY + 13.4, 18.1, 18.1))
        mainAppStrokeColor.setStroke()
        oval17Path.lineWidth = 4
        oval17Path.stroke()


        //// Path-152 Drawing
        let path152Path = UIBezierPath()
        path152Path.moveToPoint(CGPointMake(7.21, 50.77))
        path152Path.addCurveToPoint(CGPointMake(frame.minX + 22.21, frame.minY + 38.77), controlPoint1: CGPointMake(7.21, 50.77), controlPoint2: CGPointMake(frame.minX + 11.22, frame.minY + 38.77))
        path152Path.addCurveToPoint(CGPointMake(37.21, 50.77), controlPoint1: CGPointMake(frame.minX + 33.21, frame.minY + 38.77), controlPoint2: CGPointMake(37.21, 50.77))
        path152Path.miterLimit = 4;

        path152Path.lineCapStyle = .Round;

        path152Path.lineJoinStyle = .Round;

        path152Path.usesEvenOddFillRule = true;

        mainAppStrokeColor.setStroke()
        path152Path.lineWidth = 4
        path152Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawGlobebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor6 = UIColor(red: 0.812, green: 0.812, blue: 0.812, alpha: 0.540)
        let fillColor7 = UIColor(red: 0.383, green: 0.383, blue: 0.387, alpha: 1.000)
        let strokeColor5 = UIColor(red: 0.383, green: 0.383, blue: 0.387, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextRotateCTM(context, 1.19 * CGFloat(M_PI) / 180)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(-35, -35, 70, 70))
        fillColor6.setFill()
        circlePath.fill()


        //// Oval-1 Drawing
        let oval1Path = UIBezierPath(ovalInRect: CGRectMake(-14.13, -16, 29.03, 30))
        strokeColor5.setStroke()
        oval1Path.lineWidth = 2
        oval1Path.stroke()


        //// Rectangle-10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRectMake(-0.48, -15, 1.94, 28))
        fillColor7.setFill()
        rectangle10Path.fill()


        //// Rectangle-11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRectMake(-13.5, -1.98, 28, 1.95))
        fillColor7.setFill()
        rectangle11Path.fill()


        //// Rectangle- 3 Drawing
        let rectangle3Path = UIBezierPath()
        rectangle3Path.moveToPoint(CGPointMake(5.32, -15))
        rectangle3Path.addCurveToPoint(CGPointMake(7.26, -1), controlPoint1: CGPointMake(5.32, -15), controlPoint2: CGPointMake(7.26, -5.58))
        rectangle3Path.addCurveToPoint(CGPointMake(5.32, 13), controlPoint1: CGPointMake(7.26, 3.75), controlPoint2: CGPointMake(5.32, 13))
        rectangle3Path.addLineToPoint(CGPointMake(7.26, 13))
        rectangle3Path.addCurveToPoint(CGPointMake(8.75, 6.1), controlPoint1: CGPointMake(7.26, 13), controlPoint2: CGPointMake(8.08, 9.74))
        rectangle3Path.addCurveToPoint(CGPointMake(9.58, -1), controlPoint1: CGPointMake(9.2, 3.61), controlPoint2: CGPointMake(9.58, 0.94))
        rectangle3Path.addCurveToPoint(CGPointMake(7.26, -15), controlPoint1: CGPointMake(9.58, -5.54), controlPoint2: CGPointMake(7.26, -15))
        rectangle3Path.addLineToPoint(CGPointMake(5.32, -15))
        rectangle3Path.closePath()
        rectangle3Path.miterLimit = 4;

        rectangle3Path.usesEvenOddFillRule = true;

        fillColor7.setFill()
        rectangle3Path.fill()


        //// Rectangle-12 Drawing
        let rectangle12Path = UIBezierPath()
        rectangle12Path.moveToPoint(CGPointMake(-3.97, -15))
        rectangle12Path.addCurveToPoint(CGPointMake(-5.9, -1), controlPoint1: CGPointMake(-3.97, -15), controlPoint2: CGPointMake(-5.9, -5.58))
        rectangle12Path.addCurveToPoint(CGPointMake(-3.97, 13), controlPoint1: CGPointMake(-5.9, 3.75), controlPoint2: CGPointMake(-3.97, 13))
        rectangle12Path.addLineToPoint(CGPointMake(-5.9, 13))
        rectangle12Path.addCurveToPoint(CGPointMake(-7.39, 6.1), controlPoint1: CGPointMake(-5.9, 13), controlPoint2: CGPointMake(-6.72, 9.74))
        rectangle12Path.addCurveToPoint(CGPointMake(-8.23, -1), controlPoint1: CGPointMake(-7.84, 3.61), controlPoint2: CGPointMake(-8.23, 0.94))
        rectangle12Path.addCurveToPoint(CGPointMake(-5.9, -15), controlPoint1: CGPointMake(-8.23, -5.54), controlPoint2: CGPointMake(-5.9, -15))
        rectangle12Path.addLineToPoint(CGPointMake(-3.97, -15))
        rectangle12Path.closePath()
        rectangle12Path.miterLimit = 4;

        rectangle12Path.usesEvenOddFillRule = true;

        fillColor7.setFill()
        rectangle12Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawSearchtab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.52379 * frame.width, frame.minY + 0.51089 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Path-82 Drawing
        let path82Path = UIBezierPath()
        path82Path.moveToPoint(CGPointMake(6.59, 6.58))
        path82Path.addLineToPoint(CGPointMake(13.19, 14.54))
        path82Path.miterLimit = 4;

        path82Path.lineCapStyle = .Round;

        path82Path.lineJoinStyle = .Round;

        path82Path.usesEvenOddFillRule = true;

        strokeColor3.setStroke()
        path82Path.lineWidth = 3.5
        path82Path.stroke()


        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-13.19, -14.54, 23, 23))
        strokeColor3.setStroke()
        oval77Path.lineWidth = 3.5
        oval77Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawTrendingtab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-700 Drawing
        let rectangle700Path = UIBezierPath(roundedRect: CGRectMake(-18, 0.94, 12.92, 3.75), cornerRadius: 1.88)
        fillColor3.setFill()
        rectangle700Path.fill()


        //// Rectangle-700-Copy Drawing
        let rectangle700CopyPath = UIBezierPath(roundedRect: CGRectMake(-18, -14.06, 20.31, 3.75), cornerRadius: 1.88)
        fillColor3.setFill()
        rectangle700CopyPath.fill()


        //// Rectangle-700-Copy-2 Drawing
        let rectangle700Copy2Path = UIBezierPath(roundedRect: CGRectMake(-18, -6.56, 20.31, 3.75), cornerRadius: 1.88)
        fillColor3.setFill()
        rectangle700Copy2Path.fill()


        //// Oval-117-Copy Drawing
        let oval117CopyPath = UIBezierPath(ovalInRect: CGRectMake(-1.35, 1.9, 12.9, 13.1))
        fillColor3.setFill()
        oval117CopyPath.fill()


        //// Path-118 Drawing
        let path118Path = UIBezierPath()
        path118Path.moveToPoint(CGPointMake(18, -15))
        path118Path.addLineToPoint(CGPointMake(9.79, -11))
        path118Path.addLineToPoint(CGPointMake(9.79, 8.25))
        path118Path.miterLimit = 4;

        path118Path.lineCapStyle = .Round;

        path118Path.lineJoinStyle = .Round;

        path118Path.usesEvenOddFillRule = true;

        strokeColor3.setStroke()
        path118Path.lineWidth = 3.5
        path118Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawFavoritestab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false, favorited: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let tealColor = UIColor(red: 0.145, green: 0.780, blue: 0.530, alpha: 1.000)

        //// Variable Declarations
        let strokeColor = selected ? highlightedColor : color
        let favoritedIconColor = favorited ? tealColor : strokeColor

        //// star Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.51000 * frame.height)
        CGContextScaleCTM(context, scale, scale)

        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(-0.08, 7.5))
        starPath.addLineToPoint(CGPointMake(-9.4, 14))
        starPath.addLineToPoint(CGPointMake(-6.12, 3.11))
        starPath.addLineToPoint(CGPointMake(-15.17, -3.76))
        starPath.addLineToPoint(CGPointMake(-3.81, -4))
        starPath.addLineToPoint(CGPointMake(-0.08, -14.74))
        starPath.addLineToPoint(CGPointMake(3.65, -4))
        starPath.addLineToPoint(CGPointMake(15, -3.76))
        starPath.addLineToPoint(CGPointMake(5.95, 3.11))
        starPath.addLineToPoint(CGPointMake(9.24, 14))
        starPath.addLineToPoint(CGPointMake(-0.08, 7.5))
        starPath.closePath()
        starPath.miterLimit = 4;

        starPath.lineCapStyle = .Round;

        starPath.lineJoinStyle = .Round;

        starPath.usesEvenOddFillRule = true;

        favoritedIconColor.setFill()
        starPath.fill()
        favoritedIconColor.setStroke()
        starPath.lineWidth = 4
        starPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawRecentstab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-16, -16, 32, 32))
        strokeColor3.setStroke()
        oval77Path.lineWidth = 3.5
        oval77Path.stroke()


        //// Rectangle-1038 Drawing
        let rectangle1038Path = UIBezierPath(roundedRect: CGRectMake(-2, -9, 3.5, 11.75), cornerRadius: 1.75)
        fillColor3.setFill()
        rectangle1038Path.fill()


        //// Rectangle-1038-Copy Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, -2, 3)
        CGContextRotateCTM(context, -90 * CGFloat(M_PI) / 180)

        let rectangle1038CopyPath = UIBezierPath()
        rectangle1038CopyPath.moveToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(3.5, 1.97), controlPoint1: CGPointMake(2.72, 0), controlPoint2: CGPointMake(3.5, 0.88))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(3.5, 1.97))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(3.5, 1.97))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(3.5, 4.5))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(3.5, 7.03), controlPoint1: CGPointMake(3.5, 7.03), controlPoint2: CGPointMake(3.5, 7.03))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(3.5, 7.03))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(1.75, 9), controlPoint1: CGPointMake(3.5, 8.12), controlPoint2: CGPointMake(2.72, 9))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, 9))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, 9))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, 9))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, 9))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, 9))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(0, 7.03), controlPoint1: CGPointMake(0.78, 9), controlPoint2: CGPointMake(-0, 8.12))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(0, 7.03))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(0, 7.03))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(0, 4.5))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(0, 1.97), controlPoint1: CGPointMake(0, 1.97), controlPoint2: CGPointMake(0, 1.97))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(0, 1.97))
        rectangle1038CopyPath.addCurveToPoint(CGPointMake(1.75, -0), controlPoint1: CGPointMake(0, 0.88), controlPoint2: CGPointMake(0.78, -0))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.addLineToPoint(CGPointMake(1.75, -0))
        rectangle1038CopyPath.closePath()
        fillColor3.setFill()
        rectangle1038CopyPath.fill()

        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

    public class func drawBackarrow(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false, rotate: CGFloat = -90) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))

        //// Variable Declarations
        let strokeColor = selected ? highlightedColor : color

        //// arrow Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50500 * frame.width, frame.minY + 0.49700 * frame.height)
        CGContextRotateCTM(context, -rotate * CGFloat(M_PI) / 180)
        CGContextScaleCTM(context, scale, scale)

        let arrowPath = UIBezierPath()
        arrowPath.moveToPoint(CGPointMake(6.5, 11.7))
        arrowPath.addLineToPoint(CGPointMake(-6.5, 0))
        arrowPath.addLineToPoint(CGPointMake(6.5, -11.7))
        arrowPath.miterLimit = 4;

        arrowPath.lineCapStyle = .Round;

        arrowPath.lineJoinStyle = .Round;

        arrowPath.usesEvenOddFillRule = true;

        strokeColor.setStroke()
        arrowPath.lineWidth = 5
        arrowPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawHotness(scale scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor9 = UIColor(red: 0.970, green: 0.730, blue: 0.233, alpha: 1.000)

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 6, 7)
        CGContextScaleCTM(context, scale, scale)



        //// flames Drawing
        let flamesPath = UIBezierPath()
        flamesPath.moveToPoint(CGPointMake(frame.minX + 0.15, frame.minY + 18.13))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 8.48, frame.minY + 29.26), controlPoint1: CGPointMake(frame.minX - 1, frame.minY + 25.32), controlPoint2: CGPointMake(frame.minX + 5.16, frame.minY + 28.33))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 9.34, frame.minY + 18.56), controlPoint1: CGPointMake(frame.minX + 8.48, frame.minY + 29.26), controlPoint2: CGPointMake(frame.minX + 2.96, frame.minY + 23.14))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 18.05, frame.minY + 30), controlPoint1: CGPointMake(frame.minX + 10.58, frame.minY + 23.84), controlPoint2: CGPointMake(frame.minX + 13.73, frame.minY + 30))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 21.38, frame.minY + 10), controlPoint1: CGPointMake(frame.minX + 22.38, frame.minY + 30), controlPoint2: CGPointMake(frame.minX + 27.11, frame.minY + 18.08))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 15.93, frame.minY + 16.51), controlPoint1: CGPointMake(frame.minX + 18.82, frame.minY + 15.44), controlPoint2: CGPointMake(frame.minX + 15.93, frame.minY + 16.51))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 10.96, frame.minY), controlPoint1: CGPointMake(frame.minX + 15.93, frame.minY + 16.51), controlPoint2: CGPointMake(frame.minX + 19.5, frame.minY + 6.38))
        flamesPath.addCurveToPoint(CGPointMake(frame.minX + 0.15, frame.minY + 18.13), controlPoint1: CGPointMake(frame.minX + 8.48, frame.minY + 9.19), controlPoint2: CGPointMake(frame.minX + 1.3, frame.minY + 10.94))
        flamesPath.closePath()
        flamesPath.miterLimit = 4;

        flamesPath.usesEvenOddFillRule = true;

        fillColor9.setFill()
        flamesPath.fill()



        CGContextRestoreGState(context)
    }

    public class func drawMenu(frame frame: CGRect = CGRectMake(0, 0, 35, 35), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 17.3, frame.minY + 17.5)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-206 Drawing
        let rectangle206Path = UIBezierPath(roundedRect: CGRectMake(-1.6, -12, 3.2, 24), cornerRadius: 1.6)
        fillColor3.setFill()
        rectangle206Path.fill()


        //// Rectangle-206-Copy Drawing
        let rectangle206CopyPath = UIBezierPath(roundedRect: CGRectMake(-9.6, -12, 3.2, 24), cornerRadius: 1.6)
        fillColor3.setFill()
        rectangle206CopyPath.fill()


        //// Rectangle-206-Copy-2 Drawing
        let rectangle206Copy2Path = UIBezierPath(roundedRect: CGRectMake(6.4, -12, 3.2, 24), cornerRadius: 1.6)
        fillColor3.setFill()
        rectangle206Copy2Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawCancelbutton(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Variable Declarations
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 4)
        CGContextScaleCTM(context, scale, scale)



        //// cancelIcon Drawing
        let cancelIconPath = UIBezierPath()
        cancelIconPath.moveToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 38.67))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 31.6, frame.minY + 28.77))
        cancelIconPath.addCurveToPoint(CGPointMake(frame.minX + 28.77, frame.minY + 28.77), controlPoint1: CGPointMake(frame.minX + 30.82, frame.minY + 27.99), controlPoint2: CGPointMake(frame.minX + 29.55, frame.minY + 27.99))
        cancelIconPath.addCurveToPoint(CGPointMake(frame.minX + 28.77, frame.minY + 31.6), controlPoint1: CGPointMake(frame.minX + 27.99, frame.minY + 29.56), controlPoint2: CGPointMake(frame.minX + 27.99, frame.minY + 30.82))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 38.67, frame.minY + 41.5))
        cancelIconPath.addLineToPoint(CGPointMake(28.77, 51.4))
        cancelIconPath.addCurveToPoint(CGPointMake(28.77, 54.23), controlPoint1: CGPointMake(27.99, 52.18), controlPoint2: CGPointMake(27.99, 53.44))
        cancelIconPath.addCurveToPoint(CGPointMake(31.6, 54.23), controlPoint1: CGPointMake(29.55, 55.01), controlPoint2: CGPointMake(30.82, 55.01))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 44.33))
        cancelIconPath.addLineToPoint(CGPointMake(51.4, 54.23))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 54.23), controlPoint1: CGPointMake(52.18, 55.01), controlPoint2: CGPointMake(53.45, 55.01))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 51.4), controlPoint1: CGPointMake(55.01, 53.44), controlPoint2: CGPointMake(55.01, 52.18))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 44.33, frame.minY + 41.5))
        cancelIconPath.addLineToPoint(CGPointMake(54.23, 31.6))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 28.77), controlPoint1: CGPointMake(55.01, 30.82), controlPoint2: CGPointMake(55.01, 29.56))
        cancelIconPath.addCurveToPoint(CGPointMake(51.4, 28.77), controlPoint1: CGPointMake(53.45, 27.99), controlPoint2: CGPointMake(52.18, 27.99))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 38.67))
        cancelIconPath.closePath()
        cancelIconPath.miterLimit = 4;

        cancelIconPath.usesEvenOddFillRule = true;

        selectedHighlightColor.setFill()
        cancelIconPath.fill()



        CGContextRestoreGState(context)
    }

    public class func drawInsertbutton(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Variable Declarations
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 5)
        CGContextScaleCTM(context, scale, scale)



        //// path-1 Drawing
        let path1Path = UIBezierPath()
        path1Path.moveToPoint(CGPointMake(frame.minX + 30.71, frame.minY + 40.93))
        path1Path.addLineToPoint(CGPointMake(frame.minX + 41.52, frame.minY + 29.93))
        path1Path.addLineToPoint(CGPointMake(51.73, 40.64))
        path1Path.miterLimit = 4;

        path1Path.lineCapStyle = .Round;

        path1Path.lineJoinStyle = .Round;

        path1Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path1Path.lineWidth = 4
        path1Path.stroke()


        //// Path- 2 Drawing
        let path2Path = UIBezierPath()
        path2Path.moveToPoint(CGPointMake(frame.minX + 41.39, frame.minY + 29.89))
        path2Path.addLineToPoint(CGPointMake(41.41, 61.61))
        path2Path.miterLimit = 4;

        path2Path.lineCapStyle = .Round;

        path2Path.lineJoinStyle = .Round;

        path2Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path2Path.lineWidth = 4
        path2Path.stroke()


        //// Path-106 Drawing
        let path106Path = UIBezierPath()
        path106Path.moveToPoint(CGPointMake(frame.minX + 29, frame.minY + 23))
        path106Path.addLineToPoint(CGPointMake(54, 23))
        path106Path.miterLimit = 4;

        path106Path.lineCapStyle = .Round;

        path106Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path106Path.lineWidth = 4
        path106Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawLyricsclosebutton(scale scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor7 = UIColor(red: 0.383, green: 0.383, blue: 0.387, alpha: 1.000)
        let fillColor10 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Frames
        let frame = CGRectMake(0, 0, 35, 35)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 1, 2)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 6, frame.minY + 4, 56, 56))
        fillColor10.setFill()
        oval77Path.fill()


        //// Rectangle-614 Drawing
        let rectangle614Path = UIBezierPath()
        rectangle614Path.moveToPoint(CGPointMake(36.23, 31.97))
        rectangle614Path.addLineToPoint(CGPointMake(42.46, 25.74))
        rectangle614Path.addCurveToPoint(CGPointMake(42.46, 23.49), controlPoint1: CGPointMake(43.08, 25.12), controlPoint2: CGPointMake(43.08, 24.11))
        rectangle614Path.addCurveToPoint(CGPointMake(40.2, 23.48), controlPoint1: CGPointMake(41.83, 22.86), controlPoint2: CGPointMake(40.82, 22.86))
        rectangle614Path.addLineToPoint(CGPointMake(frame.minX + 33.97, frame.minY + 29.71))
        rectangle614Path.addLineToPoint(CGPointMake(frame.minX + 27.74, frame.minY + 23.48))
        rectangle614Path.addCurveToPoint(CGPointMake(frame.minX + 25.49, frame.minY + 23.49), controlPoint1: CGPointMake(frame.minX + 27.12, frame.minY + 22.86), controlPoint2: CGPointMake(frame.minX + 26.11, frame.minY + 22.86))
        rectangle614Path.addCurveToPoint(CGPointMake(frame.minX + 25.48, frame.minY + 25.74), controlPoint1: CGPointMake(frame.minX + 24.86, frame.minY + 24.11), controlPoint2: CGPointMake(frame.minX + 24.86, frame.minY + 25.12))
        rectangle614Path.addLineToPoint(CGPointMake(frame.minX + 31.71, frame.minY + 31.97))
        rectangle614Path.addLineToPoint(CGPointMake(25.48, 38.2))
        rectangle614Path.addCurveToPoint(CGPointMake(25.49, 40.46), controlPoint1: CGPointMake(24.86, 38.82), controlPoint2: CGPointMake(24.86, 39.83))
        rectangle614Path.addCurveToPoint(CGPointMake(27.74, 40.46), controlPoint1: CGPointMake(26.11, 41.09), controlPoint2: CGPointMake(27.12, 41.08))
        rectangle614Path.addLineToPoint(CGPointMake(frame.minX + 33.97, frame.minY + 34.23))
        rectangle614Path.addLineToPoint(CGPointMake(40.2, 40.46))
        rectangle614Path.addCurveToPoint(CGPointMake(42.46, 40.46), controlPoint1: CGPointMake(40.82, 41.08), controlPoint2: CGPointMake(41.83, 41.08))
        rectangle614Path.addCurveToPoint(CGPointMake(42.46, 38.2), controlPoint1: CGPointMake(43.09, 39.83), controlPoint2: CGPointMake(43.08, 38.82))
        rectangle614Path.addLineToPoint(CGPointMake(36.23, 31.97))
        rectangle614Path.closePath()
        rectangle614Path.miterLimit = 4;

        rectangle614Path.usesEvenOddFillRule = true;

        fillColor7.setFill()
        rectangle614Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawSnapchat(scale scale: CGFloat = 0.5, snapchatSelect: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)
        let strokeColor3 = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)
        let snapchatYellow = UIColor(red: 0.988, green: 1.000, blue: 0.012, alpha: 1.000)

        //// Variable Declarations
        let snapchatFillColor = snapchatSelect ? snapchatYellow : noneColor

        //// Frames
        let frame = CGRectMake(0, 0, 35, 35)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 7, 4)
        CGContextScaleCTM(context, scale, scale)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(frame.minX + 13.71, frame.minY + 21.36))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 14.3, frame.minY + 20.75), controlPoint1: CGPointMake(frame.minX + 14.09, frame.minY + 21.4), controlPoint2: CGPointMake(frame.minX + 14.35, frame.minY + 21.13))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 21.96, frame.minY + 9), controlPoint1: CGPointMake(frame.minX + 14.3, frame.minY + 20.75), controlPoint2: CGPointMake(frame.minX + 11.89, frame.minY + 9))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 29.49, frame.minY + 20.75), controlPoint1: CGPointMake(frame.minX + 32.04, frame.minY + 9), controlPoint2: CGPointMake(frame.minX + 29.49, frame.minY + 20.75))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 30.07, frame.minY + 21.36), controlPoint1: CGPointMake(frame.minX + 29.43, frame.minY + 21.13), controlPoint2: CGPointMake(frame.minX + 29.69, frame.minY + 21.4))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 32.4, frame.minY + 21.07))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 33.25, frame.minY + 21.37), controlPoint1: CGPointMake(frame.minX + 32.67, frame.minY + 21.04), controlPoint2: CGPointMake(frame.minX + 33.06, frame.minY + 21.16))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 33.54, frame.minY + 22.53), controlPoint1: CGPointMake(frame.minX + 33.25, frame.minY + 21.37), controlPoint2: CGPointMake(frame.minX + 33.9, frame.minY + 21.79))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 30.39, frame.minY + 24.75), controlPoint1: CGPointMake(frame.minX + 33.18, frame.minY + 23.27), controlPoint2: CGPointMake(frame.minX + 30.39, frame.minY + 24.75))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 32.36, frame.minY + 29.37), controlPoint1: CGPointMake(frame.minX + 30.39, frame.minY + 24.75), controlPoint2: CGPointMake(frame.minX + 30.69, frame.minY + 27.55))
        bezierPath.addCurveToPoint(CGPointMake(37, 32.17), controlPoint1: CGPointMake(frame.minX + 33.91, frame.minY + 31.05), controlPoint2: CGPointMake(37, 31.48))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 33.88, frame.minY + 33.81), controlPoint1: CGPointMake(37.01, 33.72), controlPoint2: CGPointMake(frame.minX + 33.88, frame.minY + 33.81))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 32.74, frame.minY + 34.9), controlPoint1: CGPointMake(frame.minX + 33.33, frame.minY + 33.86), controlPoint2: CGPointMake(frame.minX + 32.82, frame.minY + 34.34))
        bezierPath.addLineToPoint(CGPointMake(32.51, 36.48))
        bezierPath.addCurveToPoint(CGPointMake(31.41, 37.18), controlPoint1: CGPointMake(32.43, 37.03), controlPoint2: CGPointMake(31.94, 37.35))
        bezierPath.addLineToPoint(CGPointMake(32.36, 37.48))
        bezierPath.addCurveToPoint(CGPointMake(25.04, 39.55), controlPoint1: CGPointMake(30.47, 36.89), controlPoint2: CGPointMake(27.2, 37.82))
        bezierPath.addLineToPoint(CGPointMake(24.31, 40.14))
        bezierPath.addCurveToPoint(CGPointMake(19.65, 40.13), controlPoint1: CGPointMake(23.01, 41.18), controlPoint2: CGPointMake(20.93, 41.17))
        bezierPath.addLineToPoint(CGPointMake(18.99, 39.58))
        bezierPath.addCurveToPoint(CGPointMake(11.74, 37.48), controlPoint1: CGPointMake(16.86, 37.83), controlPoint2: CGPointMake(13, 37.08))
        bezierPath.addLineToPoint(CGPointMake(12.7, 37.18))
        bezierPath.addCurveToPoint(CGPointMake(11.59, 36.48), controlPoint1: CGPointMake(12.17, 37.34), controlPoint2: CGPointMake(11.67, 37.04))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 11.34, frame.minY + 34.9))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 10.2, frame.minY + 33.92), controlPoint1: CGPointMake(frame.minX + 11.26, frame.minY + 34.35), controlPoint2: CGPointMake(frame.minX + 10.74, frame.minY + 33.92))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 7, frame.minY + 32.62), controlPoint1: CGPointMake(frame.minX + 10.2, frame.minY + 33.92), controlPoint2: CGPointMake(frame.minX + 7, frame.minY + 34.17))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 11.74, frame.minY + 29.21), controlPoint1: CGPointMake(frame.minX + 7, frame.minY + 32), controlPoint2: CGPointMake(frame.minX + 10.15, frame.minY + 31.14))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 13.58, frame.minY + 24.75), controlPoint1: CGPointMake(frame.minX + 13.33, frame.minY + 27.27), controlPoint2: CGPointMake(frame.minX + 13.58, frame.minY + 24.75))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 10.15, frame.minY + 22.63), controlPoint1: CGPointMake(frame.minX + 13.58, frame.minY + 24.75), controlPoint2: CGPointMake(frame.minX + 10.64, frame.minY + 23.67))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 10.24, frame.minY + 21.36), controlPoint1: CGPointMake(frame.minX + 9.66, frame.minY + 21.58), controlPoint2: CGPointMake(frame.minX + 10.24, frame.minY + 21.36))
        bezierPath.addCurveToPoint(CGPointMake(frame.minX + 11.1, frame.minY + 21.07), controlPoint1: CGPointMake(frame.minX + 10.44, frame.minY + 21.17), controlPoint2: CGPointMake(frame.minX + 10.82, frame.minY + 21.04))
        bezierPath.addLineToPoint(CGPointMake(frame.minX + 13.71, frame.minY + 21.36))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        bezierPath.lineJoinStyle = .Bevel;

        bezierPath.usesEvenOddFillRule = true;

        snapchatFillColor.setFill()
        bezierPath.fill()
        strokeColor3.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawCanvas1(frame frame: CGRect = CGRectMake(102, 96, 265, 276)) {
        //// Color Declarations
        let fillColor = UIColor(red: 0.072, green: 0.114, blue: 0.222, alpha: 1.000)

        //// path Drawing
        let pathPath = UIBezierPath()
        pathPath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.01428 * frame.height))
        pathPath.addCurveToPoint(CGPointMake(frame.minX + 0.01481 * frame.width, frame.minY + -0.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00639 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.00665 * frame.width, frame.minY + -0.00000 * frame.height))
        pathPath.addLineToPoint(CGPointMake(frame.minX + 0.98519 * frame.width, frame.minY + -0.00000 * frame.height))
        pathPath.addCurveToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.01428 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.99337 * frame.width, frame.minY + -0.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00640 * frame.height))
        pathPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.85646 * frame.height))
        pathPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        pathPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.01428 * frame.height))
        pathPath.closePath()
        pathPath.miterLimit = 4;

        pathPath.usesEvenOddFillRule = true;

        fillColor.setFill()
        pathPath.fill()
    }

    public class func drawEmojiSelectedIcon(frame frame: CGRect = CGRectMake(0, 0, 52, 52), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor11 = UIColor(red: 0.888, green: 0.888, blue: 0.888, alpha: 1.000)

        //// emoji-nav
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Oval-171 Drawing
        let oval171Path = UIBezierPath(ovalInRect: CGRectMake(-26, -26, 52, 52))
        fillColor11.setFill()
        oval171Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawAbcIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// label Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)

        let labelRect = CGRectMake(-25, -14, 50, 28)
        let labelStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        labelStyle.alignment = .Center

        let labelFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue", size: 24)!, NSForegroundColorAttributeName: color, NSParagraphStyleAttributeName: labelStyle]

        "ABC".drawInRect(labelRect, withAttributes: labelFontAttributes)

        CGContextRestoreGState(context)
    }

    public class func drawRecentIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.52000 * frame.width, frame.minY + 0.54000 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Oval-99-Copy Drawing
        let oval99CopyPath = UIBezierPath(ovalInRect: CGRectMake(-16, -17, 30, 30))
        color.setStroke()
        oval99CopyPath.lineWidth = 2
        oval99CopyPath.stroke()


        //// Rectangle-554 Drawing
        let rectangle554Path = UIBezierPath(rect: CGRectMake(-2, -12, 2, 12))
        color.setFill()
        rectangle554Path.fill()


        //// Rectangle-555 Drawing
        let rectangle555Path = UIBezierPath(rect: CGRectMake(-9, -2, 9, 2))
        color.setFill()
        rectangle555Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawPeopleIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Oval-99 Drawing
        let oval99Path = UIBezierPath(ovalInRect: CGRectMake(-15, -15, 30, 30))
        color.setStroke()
        oval99Path.lineWidth = 2
        oval99Path.stroke()


        //// Oval-107 Drawing
        let oval107Path = UIBezierPath(ovalInRect: CGRectMake(-6, -6, 4, 4))
        color.setFill()
        oval107Path.fill()
        color.setStroke()
        oval107Path.lineWidth = 1
        oval107Path.stroke()


        //// Oval-107-Copy Drawing
        let oval107CopyPath = UIBezierPath(ovalInRect: CGRectMake(2, -6, 4, 4))
        color.setFill()
        oval107CopyPath.fill()
        color.setStroke()
        oval107CopyPath.lineWidth = 1
        oval107CopyPath.stroke()


        //// Path-93 Drawing
        let path93Path = UIBezierPath()
        path93Path.moveToPoint(CGPointMake(-6.84, 3.26))
        path93Path.addCurveToPoint(CGPointMake(0.25, 6.81), controlPoint1: CGPointMake(-6.84, 3.26), controlPoint2: CGPointMake(-4.56, 6.81))
        path93Path.addCurveToPoint(CGPointMake(6.67, 3.26), controlPoint1: CGPointMake(5.07, 6.81), controlPoint2: CGPointMake(6.67, 3.26))
        path93Path.miterLimit = 4;

        path93Path.lineCapStyle = .Round;

        path93Path.lineJoinStyle = .Round;

        path93Path.usesEvenOddFillRule = true;

        color.setStroke()
        path93Path.lineWidth = 2
        path93Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawNatureIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50069 * frame.width, frame.minY + 0.49830 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Rectangle-556 Drawing
        let rectangle556Path = UIBezierPath(rect: CGRectMake(-2.03, 6.09, 4, 8))
        color.setFill()
        rectangle556Path.fill()
        color.setStroke()
        rectangle556Path.lineWidth = 2
        rectangle556Path.stroke()


        //// Path-94 Drawing
        let path94Path = UIBezierPath()
        path94Path.moveToPoint(CGPointMake(0.15, 5.09))
        path94Path.addLineToPoint(CGPointMake(-9.5, 5.09))
        path94Path.addLineToPoint(CGPointMake(-3.63, -3.82))
        path94Path.addLineToPoint(CGPointMake(-7.02, -3.82))
        path94Path.addLineToPoint(CGPointMake(-0.28, -14.09))
        path94Path.addLineToPoint(CGPointMake(6.94, -3.82))
        path94Path.addLineToPoint(CGPointMake(3.47, -3.82))
        path94Path.addLineToPoint(CGPointMake(9.5, 5.09))
        path94Path.addLineToPoint(CGPointMake(0.15, 5.09))
        path94Path.closePath()
        path94Path.miterLimit = 4;

        path94Path.usesEvenOddFillRule = true;

        color.setStroke()
        path94Path.lineWidth = 2
        path94Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawFoodIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50204 * frame.width, frame.minY + 0.49545 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// martini
        //// Path-95 Drawing
        let path95Path = UIBezierPath()
        path95Path.moveToPoint(CGPointMake(-3.47, -1.96))
        path95Path.addLineToPoint(CGPointMake(-2.79, -6.77))
        path95Path.addLineToPoint(CGPointMake(-16.09, -6.77))
        path95Path.addLineToPoint(CGPointMake(-13.09, 13.21))
        path95Path.addLineToPoint(CGPointMake(-5.96, 13.21))
        path95Path.addLineToPoint(CGPointMake(-5.64, 11.75))
        path95Path.miterLimit = 4;

        path95Path.lineJoinStyle = .Round;

        path95Path.usesEvenOddFillRule = true;

        color.setStroke()
        path95Path.lineWidth = 2
        path95Path.stroke()


        //// Path-97 Drawing
        let path97Path = UIBezierPath()
        path97Path.moveToPoint(CGPointMake(-9.26, -6.8))
        path97Path.addLineToPoint(CGPointMake(-6.85, -13.23))
        path97Path.addLineToPoint(CGPointMake(-1.74, -10.96))
        path97Path.miterLimit = 4;

        path97Path.usesEvenOddFillRule = true;

        color.setStroke()
        path97Path.lineWidth = 2
        path97Path.stroke()




        //// burger
        //// Oval-110-Copy Drawing
        let oval110CopyPath = UIBezierPath()
        oval110CopyPath.moveToPoint(CGPointMake(13.49, 6.83))
        oval110CopyPath.addCurveToPoint(CGPointMake(13.49, 10.03), controlPoint1: CGPointMake(13.49, 6.83), controlPoint2: CGPointMake(13.49, 8.93))
        oval110CopyPath.addCurveToPoint(CGPointMake(2.94, 13.23), controlPoint1: CGPointMake(13.49, 13.23), controlPoint2: CGPointMake(8.05, 13.23))
        oval110CopyPath.addCurveToPoint(CGPointMake(-6.82, 10.03), controlPoint1: CGPointMake(-2.17, 13.23), controlPoint2: CGPointMake(-6.82, 13.23))
        oval110CopyPath.addCurveToPoint(CGPointMake(-6.27, 6.83), controlPoint1: CGPointMake(-6.82, 9.03), controlPoint2: CGPointMake(-6.98, 7.3))
        oval110CopyPath.miterLimit = 4;

        oval110CopyPath.usesEvenOddFillRule = true;

        color.setStroke()
        oval110CopyPath.lineWidth = 2
        oval110CopyPath.stroke()


        //// Oval-110 Drawing
        let oval110Path = UIBezierPath()
        oval110Path.moveToPoint(CGPointMake(3.41, 4.09))
        oval110Path.addCurveToPoint(CGPointMake(12.16, 3.82), controlPoint1: CGPointMake(10.14, 4.09), controlPoint2: CGPointMake(12.16, 3.82))
        oval110Path.addCurveToPoint(CGPointMake(13.17, 1.33), controlPoint1: CGPointMake(13.81, 3.69), controlPoint2: CGPointMake(14.3, 2.55))
        oval110Path.addCurveToPoint(CGPointMake(3.09, -3.77), controlPoint1: CGPointMake(13.17, 1.33), controlPoint2: CGPointMake(9.82, -3.77))
        oval110Path.addCurveToPoint(CGPointMake(-6.58, 1.26), controlPoint1: CGPointMake(-3.65, -3.77), controlPoint2: CGPointMake(-6.58, 1.26))
        oval110Path.addCurveToPoint(CGPointMake(-5.46, 3.81), controlPoint1: CGPointMake(-7.62, 2.54), controlPoint2: CGPointMake(-7.13, 3.7))
        oval110Path.addCurveToPoint(CGPointMake(3.41, 4.09), controlPoint1: CGPointMake(-5.46, 3.81), controlPoint2: CGPointMake(-3.32, 4.09))
        oval110Path.closePath()
        oval110Path.miterLimit = 4;

        oval110Path.usesEvenOddFillRule = true;

        color.setStroke()
        oval110Path.lineWidth = 2
        oval110Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(13.63, 4.33))
        bezierPath.addLineToPoint(CGPointMake(-6.74, 4.33))
        bezierPath.addLineToPoint(CGPointMake(3.73, 7.83))
        bezierPath.addLineToPoint(CGPointMake(13.63, 4.33))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(14.34, 3.39))
        bezierPath.addCurveToPoint(CGPointMake(14.48, 3.42), controlPoint1: CGPointMake(14.38, 3.4), controlPoint2: CGPointMake(14.48, 3.42))
        bezierPath.addCurveToPoint(CGPointMake(16.09, 5.71), controlPoint1: CGPointMake(15.44, 3.77), controlPoint2: CGPointMake(16.09, 4.69))
        bezierPath.addCurveToPoint(CGPointMake(16.09, 5.85), controlPoint1: CGPointMake(16.09, 5.85), controlPoint2: CGPointMake(16.09, 5.85))
        bezierPath.addLineToPoint(CGPointMake(16.09, 5.98))
        bezierPath.addCurveToPoint(CGPointMake(14.48, 8.27), controlPoint1: CGPointMake(16.09, 7), controlPoint2: CGPointMake(15.44, 7.92))
        bezierPath.addCurveToPoint(CGPointMake(12.13, 8.46), controlPoint1: CGPointMake(13.86, 8.46), controlPoint2: CGPointMake(13.28, 8.46))
        bezierPath.addLineToPoint(CGPointMake(1.6, 8.46))
        bezierPath.addCurveToPoint(CGPointMake(-7.4, 8.29), controlPoint1: CGPointMake(-6.3, 8.46), controlPoint2: CGPointMake(-6.88, 8.46))
        bezierPath.addLineToPoint(CGPointMake(-7.5, 8.27))
        bezierPath.addCurveToPoint(CGPointMake(-9.1, 5.98), controlPoint1: CGPointMake(-8.46, 7.92), controlPoint2: CGPointMake(-9.1, 7))
        bezierPath.addCurveToPoint(CGPointMake(-9.1, 5.85), controlPoint1: CGPointMake(-9.1, 5.85), controlPoint2: CGPointMake(-9.1, 5.85))
        bezierPath.addLineToPoint(CGPointMake(-9.1, 5.71))
        bezierPath.addCurveToPoint(CGPointMake(-7.5, 3.42), controlPoint1: CGPointMake(-9.1, 4.69), controlPoint2: CGPointMake(-8.46, 3.77))
        bezierPath.addCurveToPoint(CGPointMake(-5.67, 3.23), controlPoint1: CGPointMake(-6.98, 3.26), controlPoint2: CGPointMake(-6.49, 3.23))
        bezierPath.addCurveToPoint(CGPointMake(-5.15, 3.23), controlPoint1: CGPointMake(-5.51, 3.23), controlPoint2: CGPointMake(-5.34, 3.23))
        bezierPath.addLineToPoint(CGPointMake(5.38, 3.23))
        bezierPath.addCurveToPoint(CGPointMake(14.38, 3.4), controlPoint1: CGPointMake(13.28, 3.23), controlPoint2: CGPointMake(13.86, 3.23))
        bezierPath.addLineToPoint(CGPointMake(14.34, 3.39))
        bezierPath.closePath()
        color.setFill()
        bezierPath.fill()





        CGContextRestoreGState(context)
    }

    public class func drawConfettiIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50875 * frame.width, frame.minY + 0.49434 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Path-103 Drawing
        let path103Path = UIBezierPath()
        path103Path.moveToPoint(CGPointMake(5.76, 6.21))
        path103Path.addLineToPoint(CGPointMake(-11.88, 14.53))
        path103Path.addCurveToPoint(CGPointMake(-13, 13.52), controlPoint1: CGPointMake(-12.88, 15), controlPoint2: CGPointMake(-13.38, 14.55))
        path103Path.addLineToPoint(CGPointMake(-6.29, -4.46))
        path103Path.miterLimit = 4;

        path103Path.usesEvenOddFillRule = true;

        color.setStroke()
        path103Path.lineWidth = 2
        path103Path.stroke()


        //// Oval-124 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 1.41, -0.42)
        CGContextRotateCTM(context, 38 * CGFloat(M_PI) / 180)

        let oval124Path = UIBezierPath(ovalInRect: CGRectMake(-9.5, -4, 19, 8))
        color.setStroke()
        oval124Path.lineWidth = 2
        oval124Path.stroke()

        CGContextRestoreGState(context)


        //// Path-104 Drawing
        let path104Path = UIBezierPath()
        path104Path.moveToPoint(CGPointMake(-0.75, -2.09))
        path104Path.addLineToPoint(CGPointMake(-1.14, -8.75))
        path104Path.addCurveToPoint(CGPointMake(-3.95, -10.72), controlPoint1: CGPointMake(-1.23, -10.27), controlPoint2: CGPointMake(-2.48, -11.16))
        path104Path.addLineToPoint(CGPointMake(-6.28, -10.03))
        path104Path.miterLimit = 4;

        path104Path.lineCapStyle = .Round;

        path104Path.lineJoinStyle = .Round;

        path104Path.usesEvenOddFillRule = true;

        color.setStroke()
        path104Path.lineWidth = 2
        path104Path.stroke()


        //// Path-105 Drawing
        let path105Path = UIBezierPath()
        path105Path.moveToPoint(CGPointMake(3.46, 1.12))
        path105Path.addLineToPoint(CGPointMake(6.73, -1.05))
        path105Path.addCurveToPoint(CGPointMake(8.95, -1.3), controlPoint1: CGPointMake(7.31, -1.43), controlPoint2: CGPointMake(8.3, -1.55))
        path105Path.addLineToPoint(CGPointMake(13.61, 0.48))
        path105Path.miterLimit = 4;

        path105Path.lineCapStyle = .Round;

        path105Path.lineJoinStyle = .Round;

        path105Path.usesEvenOddFillRule = true;

        color.setStroke()
        path105Path.lineWidth = 2
        path105Path.stroke()


        //// Path-106 Drawing
        let path106Path = UIBezierPath()
        path106Path.moveToPoint(CGPointMake(5.4, -5.17))
        path106Path.addLineToPoint(CGPointMake(5.65, -9.06))
        path106Path.addLineToPoint(CGPointMake(12.61, -6.38))
        path106Path.addLineToPoint(CGPointMake(11.4, -11.01))
        path106Path.addLineToPoint(CGPointMake(15.56, -10.67))
        path106Path.miterLimit = 4;

        path106Path.lineCapStyle = .Round;

        path106Path.lineJoinStyle = .Round;

        path106Path.usesEvenOddFillRule = true;

        color.setStroke()
        path106Path.lineWidth = 2
        path106Path.stroke()


        //// Path-107 Drawing
        let path107Path = UIBezierPath()
        path107Path.moveToPoint(CGPointMake(-11.9, -4.26))
        path107Path.addCurveToPoint(CGPointMake(-11.16, -7.63), controlPoint1: CGPointMake(-11.9, -4.26), controlPoint2: CGPointMake(-10.42, -7.63))
        path107Path.addCurveToPoint(CGPointMake(-16.28, -7.72), controlPoint1: CGPointMake(-11.9, -7.63), controlPoint2: CGPointMake(-16.28, -7.72))
        path107Path.addLineToPoint(CGPointMake(-13.66, -10.9))
        path107Path.addLineToPoint(CGPointMake(-16.56, -13.47))
        path107Path.miterLimit = 4;

        path107Path.lineCapStyle = .Round;

        path107Path.lineJoinStyle = .Round;

        path107Path.usesEvenOddFillRule = true;

        color.setStroke()
        path107Path.lineWidth = 2
        path107Path.stroke()


        //// Oval-125 Drawing
        let oval125Path = UIBezierPath(ovalInRect: CGRectMake(4.56, 10.28, 2, 2))
        color.setFill()
        oval125Path.fill()


        //// Oval-125-Copy Drawing
        let oval125CopyPath = UIBezierPath(ovalInRect: CGRectMake(10.56, 6.28, 2, 2))
        color.setFill()
        oval125CopyPath.fill()


        //// Oval-125-Copy-2 Drawing
        let oval125Copy2Path = UIBezierPath(ovalInRect: CGRectMake(12.56, 12.28, 2, 2))
        color.setFill()
        oval125Copy2Path.fill()


        //// Oval-125-Copy-3 Drawing
        let oval125Copy3Path = UIBezierPath(ovalInRect: CGRectMake(14.56, 3.28, 2, 2))
        color.setFill()
        oval125Copy3Path.fill()


        //// Oval-125-Copy-4 Drawing
        let oval125Copy4Path = UIBezierPath(ovalInRect: CGRectMake(6.56, -14.72, 2, 2))
        color.setFill()
        oval125Copy4Path.fill()


        //// Oval-125-Copy-5 Drawing
        let oval125Copy5Path = UIBezierPath(ovalInRect: CGRectMake(1.56, -12.72, 2, 2))
        color.setFill()
        oval125Copy5Path.fill()


        //// Oval-125-Copy-6 Drawing
        let oval125Copy6Path = UIBezierPath(ovalInRect: CGRectMake(-15.44, -0.72, 2, 2))
        color.setFill()
        oval125Copy6Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawActivityIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.49311 * frame.width, frame.minY + 0.50498 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Oval-132 Drawing
        let oval132Path = UIBezierPath(ovalInRect: CGRectMake(3.34, -15.25, 7, 7))
        color.setFill()
        oval132Path.fill()


        //// Path-108 Drawing
        let path108Path = UIBezierPath()
        path108Path.moveToPoint(CGPointMake(-14.84, 7.07))
        path108Path.addLineToPoint(CGPointMake(-6.41, 7.69))
        path108Path.addLineToPoint(CGPointMake(-2.42, 1.6))
        path108Path.addLineToPoint(CGPointMake(5.49, 6.85))
        path108Path.addLineToPoint(CGPointMake(0.6, 15.25))
        path108Path.miterLimit = 4;

        path108Path.lineCapStyle = .Round;

        path108Path.lineJoinStyle = .Round;

        path108Path.usesEvenOddFillRule = true;

        color.setStroke()
        path108Path.lineWidth = 3
        path108Path.stroke()


        //// Path-109 Drawing
        let path109Path = UIBezierPath()
        path109Path.moveToPoint(CGPointMake(-5.56, 4.16))
        path109Path.addLineToPoint(CGPointMake(-5.53, -0.78))
        path109Path.addLineToPoint(CGPointMake(1.1, -8.87))
        path109Path.addLineToPoint(CGPointMake(2.8, -8.9))
        path109Path.addLineToPoint(CGPointMake(6.39, -6.09))
        path109Path.addLineToPoint(CGPointMake(6.45, -4.61))
        path109Path.addLineToPoint(CGPointMake(1.34, 0.18))
        path109Path.addLineToPoint(CGPointMake(2.27, 2.99))
        path109Path.addLineToPoint(CGPointMake(-1.84, 1.85))
        path109Path.addLineToPoint(CGPointMake(-5.56, 4.16))
        path109Path.closePath()
        path109Path.miterLimit = 4;

        path109Path.usesEvenOddFillRule = true;

        color.setFill()
        path109Path.fill()
        color.setStroke()
        path109Path.lineWidth = 1
        path109Path.stroke()


        //// Path-110 Drawing
        let path110Path = UIBezierPath()
        path110Path.moveToPoint(CGPointMake(5.29, -4.66))
        path110Path.addLineToPoint(CGPointMake(7.24, -0.74))
        path110Path.addLineToPoint(CGPointMake(14.84, -0.77))
        path110Path.miterLimit = 4;

        path110Path.lineCapStyle = .Round;

        path110Path.lineJoinStyle = .Round;

        path110Path.usesEvenOddFillRule = true;

        color.setStroke()
        path110Path.lineWidth = 2
        path110Path.stroke()


        //// Path-111 Drawing
        let path111Path = UIBezierPath()
        path111Path.moveToPoint(CGPointMake(1.04, -7.76))
        path111Path.addLineToPoint(CGPointMake(-3.53, -8.6))
        path111Path.addLineToPoint(CGPointMake(-9.06, -5.26))
        path111Path.miterLimit = 4;

        path111Path.lineCapStyle = .Round;

        path111Path.lineJoinStyle = .Round;

        path111Path.usesEvenOddFillRule = true;

        color.setStroke()
        path111Path.lineWidth = 2
        path111Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawBuildingsIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icons
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50945 * frame.width, frame.minY + 0.50581 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Path-112 Drawing
        let path112Path = UIBezierPath()
        path112Path.moveToPoint(CGPointMake(-14.87, 13.46))
        path112Path.addLineToPoint(CGPointMake(-15.03, -3.36))
        path112Path.addLineToPoint(CGPointMake(-7.77, -3.36))
        path112Path.addLineToPoint(CGPointMake(-7.93, -15.71))
        path112Path.addLineToPoint(CGPointMake(4.23, -15.68))
        path112Path.addLineToPoint(CGPointMake(4.32, -7.41))
        path112Path.addLineToPoint(CGPointMake(14.75, -7.41))
        path112Path.addLineToPoint(CGPointMake(15.03, 13.09))
        path112Path.miterLimit = 4;

        path112Path.usesEvenOddFillRule = true;

        color.setStroke()
        path112Path.lineWidth = 2
        path112Path.stroke()


        //// Rectangle-590 Drawing
        let rectangle590Path = UIBezierPath(rect: CGRectMake(-5.47, -12.29, 3, 2))
        color.setStroke()
        rectangle590Path.lineWidth = 1
        rectangle590Path.stroke()


        //// Rectangle-590-Copy Drawing
        let rectangle590CopyPath = UIBezierPath(rect: CGRectMake(-1.47, -12.29, 3, 2))
        color.setStroke()
        rectangle590CopyPath.lineWidth = 1
        rectangle590CopyPath.stroke()


        //// Rectangle-590-Copy-2 Drawing
        let rectangle590Copy2Path = UIBezierPath(rect: CGRectMake(-1.47, -8.29, 3, 2))
        color.setStroke()
        rectangle590Copy2Path.lineWidth = 1
        rectangle590Copy2Path.stroke()


        //// Rectangle-590-Copy-3 Drawing
        let rectangle590Copy3Path = UIBezierPath(rect: CGRectMake(-5.47, -8.29, 3, 2))
        color.setStroke()
        rectangle590Copy3Path.lineWidth = 1
        rectangle590Copy3Path.stroke()


        //// Rectangle-590-Copy-4 Drawing
        let rectangle590Copy4Path = UIBezierPath(rect: CGRectMake(-12.47, -0.29, 3, 2))
        color.setStroke()
        rectangle590Copy4Path.lineWidth = 1
        rectangle590Copy4Path.stroke()


        //// Rectangle-590-Copy-5 Drawing
        let rectangle590Copy5Path = UIBezierPath(rect: CGRectMake(9.53, -0.29, 3, 2))
        color.setStroke()
        rectangle590Copy5Path.lineWidth = 1
        rectangle590Copy5Path.stroke()


        //// Rectangle-590-Copy-6 Drawing
        let rectangle590Copy6Path = UIBezierPath(rect: CGRectMake(9.53, -4.29, 3, 2))
        color.setStroke()
        rectangle590Copy6Path.lineWidth = 1
        rectangle590Copy6Path.stroke()


        //// Rectangle-600 Drawing
        let rectangle600Path = UIBezierPath()
        rectangle600Path.moveToPoint(CGPointMake(2.03, 8.71))
        rectangle600Path.addLineToPoint(CGPointMake(2.03, 8.71))
        rectangle600Path.addLineToPoint(CGPointMake(2.03, 8.71))
        rectangle600Path.addLineToPoint(CGPointMake(0.03, 8.71))
        rectangle600Path.addCurveToPoint(CGPointMake(-1.97, 8.71), controlPoint1: CGPointMake(-1.97, 8.71), controlPoint2: CGPointMake(-1.97, 8.71))
        rectangle600Path.addLineToPoint(CGPointMake(-1.97, 8.71))
        rectangle600Path.moveToPoint(CGPointMake(-7.27, 4.68))
        rectangle600Path.addCurveToPoint(CGPointMake(-7.47, 3.21), controlPoint1: CGPointMake(-7.4, 4.21), controlPoint2: CGPointMake(-7.47, 3.72))
        rectangle600Path.addLineToPoint(CGPointMake(-7.47, 3.21))
        rectangle600Path.addLineToPoint(CGPointMake(-7.47, 3.21))
        rectangle600Path.addLineToPoint(CGPointMake(-7.47, 3.21))
        rectangle600Path.addLineToPoint(CGPointMake(-7.47, 3.21))
        rectangle600Path.addLineToPoint(CGPointMake(-7.47, 3.21))
        rectangle600Path.addCurveToPoint(CGPointMake(-1.97, -2.29), controlPoint1: CGPointMake(-7.47, 0.17), controlPoint2: CGPointMake(-5.01, -2.29))
        rectangle600Path.addLineToPoint(CGPointMake(-1.97, -2.29))
        rectangle600Path.addLineToPoint(CGPointMake(0.03, -2.29))
        rectangle600Path.addLineToPoint(CGPointMake(0.03, -2.29))
        rectangle600Path.addCurveToPoint(CGPointMake(2.03, -2.29), controlPoint1: CGPointMake(2.03, -2.29), controlPoint2: CGPointMake(2.03, -2.29))
        rectangle600Path.addLineToPoint(CGPointMake(2.03, -2.29))
        rectangle600Path.addCurveToPoint(CGPointMake(7.53, 3.21), controlPoint1: CGPointMake(5.07, -2.29), controlPoint2: CGPointMake(7.53, 0.17))
        rectangle600Path.addLineToPoint(CGPointMake(7.53, 3.21))
        rectangle600Path.addLineToPoint(CGPointMake(7.53, 3.21))
        rectangle600Path.addLineToPoint(CGPointMake(7.53, 3.21))
        rectangle600Path.addLineToPoint(CGPointMake(7.53, 3.21))
        rectangle600Path.addLineToPoint(CGPointMake(7.53, 3.21))
        rectangle600Path.addCurveToPoint(CGPointMake(7.3, 4.79), controlPoint1: CGPointMake(7.53, 3.76), controlPoint2: CGPointMake(7.45, 4.29))
        color.setStroke()
        rectangle600Path.lineWidth = 2
        rectangle600Path.stroke()


        //// Rectangle-597 Drawing
        let rectangle597Path = UIBezierPath()
        rectangle597Path.moveToPoint(CGPointMake(-6.63, 12.21))
        rectangle597Path.addLineToPoint(CGPointMake(-5.81, 12.21))
        rectangle597Path.addCurveToPoint(CGPointMake(-5.06, 12.27), controlPoint1: CGPointMake(-5.42, 12.21), controlPoint2: CGPointMake(-5.23, 12.21))
        rectangle597Path.addLineToPoint(CGPointMake(-5.02, 12.28))
        rectangle597Path.addCurveToPoint(CGPointMake(-4.54, 12.76), controlPoint1: CGPointMake(-4.8, 12.36), controlPoint2: CGPointMake(-4.62, 12.54))
        rectangle597Path.addCurveToPoint(CGPointMake(-4.47, 13.55), controlPoint1: CGPointMake(-4.47, 12.97), controlPoint2: CGPointMake(-4.47, 13.16))
        rectangle597Path.addLineToPoint(CGPointMake(-4.47, 14.37))
        rectangle597Path.addCurveToPoint(CGPointMake(-4.53, 15.12), controlPoint1: CGPointMake(-4.47, 14.76), controlPoint2: CGPointMake(-4.47, 14.95))
        rectangle597Path.addLineToPoint(CGPointMake(-4.54, 15.16))
        rectangle597Path.addCurveToPoint(CGPointMake(-5.02, 15.64), controlPoint1: CGPointMake(-4.62, 15.38), controlPoint2: CGPointMake(-4.8, 15.56))
        rectangle597Path.addCurveToPoint(CGPointMake(-5.81, 15.71), controlPoint1: CGPointMake(-5.23, 15.71), controlPoint2: CGPointMake(-5.42, 15.71))
        rectangle597Path.addLineToPoint(CGPointMake(-6.63, 15.71))
        rectangle597Path.addCurveToPoint(CGPointMake(-7.39, 15.65), controlPoint1: CGPointMake(-7.02, 15.71), controlPoint2: CGPointMake(-7.21, 15.71))
        rectangle597Path.addLineToPoint(CGPointMake(-7.42, 15.64))
        rectangle597Path.addCurveToPoint(CGPointMake(-7.91, 15.16), controlPoint1: CGPointMake(-7.65, 15.56), controlPoint2: CGPointMake(-7.82, 15.38))
        rectangle597Path.addCurveToPoint(CGPointMake(-7.97, 14.37), controlPoint1: CGPointMake(-7.97, 14.95), controlPoint2: CGPointMake(-7.97, 14.76))
        rectangle597Path.addLineToPoint(CGPointMake(-7.97, 13.55))
        rectangle597Path.addCurveToPoint(CGPointMake(-7.92, 12.8), controlPoint1: CGPointMake(-7.97, 13.16), controlPoint2: CGPointMake(-7.97, 12.97))
        rectangle597Path.addLineToPoint(CGPointMake(-7.91, 12.76))
        rectangle597Path.addCurveToPoint(CGPointMake(-7.42, 12.28), controlPoint1: CGPointMake(-7.82, 12.54), controlPoint2: CGPointMake(-7.65, 12.36))
        rectangle597Path.addCurveToPoint(CGPointMake(-6.63, 12.21), controlPoint1: CGPointMake(-7.21, 12.21), controlPoint2: CGPointMake(-7.02, 12.21))
        rectangle597Path.closePath()
        color.setFill()
        rectangle597Path.fill()
        color.setStroke()
        rectangle597Path.lineWidth = 1
        rectangle597Path.stroke()


        //// Rectangle-597-Copy Drawing
        let rectangle597CopyPath = UIBezierPath()
        rectangle597CopyPath.moveToPoint(CGPointMake(5.87, 12.21))
        rectangle597CopyPath.addLineToPoint(CGPointMake(6.69, 12.21))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(7.44, 12.27), controlPoint1: CGPointMake(7.08, 12.21), controlPoint2: CGPointMake(7.27, 12.21))
        rectangle597CopyPath.addLineToPoint(CGPointMake(7.48, 12.28))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(7.96, 12.76), controlPoint1: CGPointMake(7.7, 12.36), controlPoint2: CGPointMake(7.88, 12.54))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(8.03, 13.55), controlPoint1: CGPointMake(8.03, 12.97), controlPoint2: CGPointMake(8.03, 13.16))
        rectangle597CopyPath.addLineToPoint(CGPointMake(8.03, 14.37))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(7.97, 15.12), controlPoint1: CGPointMake(8.03, 14.76), controlPoint2: CGPointMake(8.03, 14.95))
        rectangle597CopyPath.addLineToPoint(CGPointMake(7.96, 15.16))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(7.48, 15.64), controlPoint1: CGPointMake(7.88, 15.38), controlPoint2: CGPointMake(7.7, 15.56))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(6.69, 15.71), controlPoint1: CGPointMake(7.27, 15.71), controlPoint2: CGPointMake(7.08, 15.71))
        rectangle597CopyPath.addLineToPoint(CGPointMake(5.87, 15.71))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(5.11, 15.65), controlPoint1: CGPointMake(5.48, 15.71), controlPoint2: CGPointMake(5.29, 15.71))
        rectangle597CopyPath.addLineToPoint(CGPointMake(5.08, 15.64))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(4.59, 15.16), controlPoint1: CGPointMake(4.85, 15.56), controlPoint2: CGPointMake(4.68, 15.38))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(4.53, 14.37), controlPoint1: CGPointMake(4.53, 14.95), controlPoint2: CGPointMake(4.53, 14.76))
        rectangle597CopyPath.addLineToPoint(CGPointMake(4.53, 13.55))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(4.58, 12.8), controlPoint1: CGPointMake(4.53, 13.16), controlPoint2: CGPointMake(4.53, 12.97))
        rectangle597CopyPath.addLineToPoint(CGPointMake(4.59, 12.76))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(5.08, 12.28), controlPoint1: CGPointMake(4.68, 12.54), controlPoint2: CGPointMake(4.85, 12.36))
        rectangle597CopyPath.addCurveToPoint(CGPointMake(5.87, 12.21), controlPoint1: CGPointMake(5.29, 12.21), controlPoint2: CGPointMake(5.48, 12.21))
        rectangle597CopyPath.closePath()
        color.setFill()
        rectangle597CopyPath.fill()
        color.setStroke()
        rectangle597CopyPath.lineWidth = 1
        rectangle597CopyPath.stroke()


        //// Rectangle-599 Drawing
        let rectangle599Path = UIBezierPath(roundedRect: CGRectMake(-11.47, 4.71, 23, 8), cornerRadius: 4)
        color.setStroke()
        rectangle599Path.lineWidth = 2
        rectangle599Path.stroke()


        //// Oval-133 Drawing
        let oval133Path = UIBezierPath(ovalInRect: CGRectMake(-7.47, 7.71, 2, 2))
        color.setFill()
        oval133Path.fill()
        color.setStroke()
        oval133Path.lineWidth = 1
        oval133Path.stroke()


        //// Oval-133-Copy Drawing
        let oval133CopyPath = UIBezierPath(ovalInRect: CGRectMake(5.53, 7.71, 2, 2))
        color.setFill()
        oval133CopyPath.fill()
        color.setStroke()
        oval133CopyPath.lineWidth = 1
        oval133CopyPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawRandomIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icons
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50000 * frame.width, frame.minY + 0.52000 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Path-113 Drawing
        let path113Path = UIBezierPath()
        path113Path.moveToPoint(CGPointMake(2.39, 13.44))
        path113Path.addLineToPoint(CGPointMake(12.21, 0.29))
        path113Path.miterLimit = 4;

        path113Path.usesEvenOddFillRule = true;

        color.setStroke()
        path113Path.lineWidth = 2
        path113Path.stroke()


        //// Oval-135 Drawing
        let oval135Path = UIBezierPath(ovalInRect: CGRectMake(9, 8, 6, 6))
        color.setStroke()
        oval135Path.lineWidth = 2
        oval135Path.stroke()


        //// Oval-135-Copy Drawing
        let oval135CopyPath = UIBezierPath(ovalInRect: CGRectMake(0, 0, 6, 6))
        color.setStroke()
        oval135CopyPath.lineWidth = 2
        oval135CopyPath.stroke()


        //// Oval-137 Drawing
        let oval137Path = UIBezierPath(ovalInRect: CGRectMake(0, -10, 7, 6))
        color.setFill()
        oval137Path.fill()
        color.setStroke()
        oval137Path.lineWidth = 1
        oval137Path.stroke()


        //// Path-114 Drawing
        let path114Path = UIBezierPath()
        path114Path.moveToPoint(CGPointMake(-7.95, -3.31))
        path114Path.addLineToPoint(CGPointMake(-7.89, -12.21))
        path114Path.addLineToPoint(CGPointMake(-14.25, -12.18))
        path114Path.miterLimit = 4;

        path114Path.lineCapStyle = .Round;

        path114Path.lineJoinStyle = .Round;

        path114Path.usesEvenOddFillRule = true;

        color.setStroke()
        path114Path.lineWidth = 2
        path114Path.stroke()


        //// Path-115 Drawing
        let path115Path = UIBezierPath()
        path115Path.moveToPoint(CGPointMake(-14.37, -16.06))
        path115Path.addLineToPoint(CGPointMake(-1.22, -15.97))
        path115Path.miterLimit = 4;

        path115Path.lineCapStyle = .Round;

        path115Path.lineJoinStyle = .Round;

        path115Path.usesEvenOddFillRule = true;

        color.setStroke()
        path115Path.lineWidth = 2
        path115Path.stroke()


        //// Path-116 Drawing
        let path116Path = UIBezierPath()
        path116Path.moveToPoint(CGPointMake(-3.23, 13.23))
        path116Path.addLineToPoint(CGPointMake(-11.46, 4.23))
        path116Path.addCurveToPoint(CGPointMake(-12.12, 2.5), controlPoint1: CGPointMake(-11.83, 3.83), controlPoint2: CGPointMake(-12.12, 3.06))
        path116Path.addLineToPoint(CGPointMake(-12.12, 1.5))
        path116Path.addCurveToPoint(CGPointMake(-9.17, -0.64), controlPoint1: CGPointMake(-12.12, 1.5), controlPoint2: CGPointMake(-12.03, -0.64))
        path116Path.addCurveToPoint(CGPointMake(-6.47, 1.5), controlPoint1: CGPointMake(-6.31, -0.64), controlPoint2: CGPointMake(-6.47, 1.5))
        path116Path.addLineToPoint(CGPointMake(-6.47, 2.5))
        path116Path.addCurveToPoint(CGPointMake(-7.23, 4.14), controlPoint1: CGPointMake(-6.47, 3.05), controlPoint2: CGPointMake(-6.81, 3.79))
        path116Path.addLineToPoint(CGPointMake(-12.16, 8.2))
        path116Path.addCurveToPoint(CGPointMake(-12.93, 9.83), controlPoint1: CGPointMake(-12.58, 8.55), controlPoint2: CGPointMake(-12.93, 9.28))
        path116Path.addLineToPoint(CGPointMake(-12.94, 10.4))
        path116Path.addCurveToPoint(CGPointMake(-12.27, 12.13), controlPoint1: CGPointMake(-12.95, 10.95), controlPoint2: CGPointMake(-12.65, 11.73))
        path116Path.addLineToPoint(CGPointMake(-11.88, 12.55))
        path116Path.addCurveToPoint(CGPointMake(-10.21, 13.28), controlPoint1: CGPointMake(-11.5, 12.96), controlPoint2: CGPointMake(-10.75, 13.28))
        path116Path.addLineToPoint(CGPointMake(-8.42, 13.28))
        path116Path.addCurveToPoint(CGPointMake(-6.8, 12.52), controlPoint1: CGPointMake(-7.87, 13.28), controlPoint2: CGPointMake(-7.15, 12.94))
        path116Path.addLineToPoint(CGPointMake(-4.63, 9.87))
        path116Path.addCurveToPoint(CGPointMake(-3.97, 8.11), controlPoint1: CGPointMake(-4.29, 9.45), controlPoint2: CGPointMake(-3.99, 8.66))
        path116Path.addLineToPoint(CGPointMake(-3.91, 6.16))
        path116Path.miterLimit = 4;

        path116Path.lineCapStyle = .Round;

        path116Path.lineJoinStyle = .Round;

        path116Path.usesEvenOddFillRule = true;

        color.setStroke()
        path116Path.lineWidth = 2
        path116Path.stroke()


        //// Path-117 Drawing
        let path117Path = UIBezierPath()
        path117Path.moveToPoint(CGPointMake(5.8, -6.47))
        path117Path.addCurveToPoint(CGPointMake(7.8, -16.16), controlPoint1: CGPointMake(5.8, -7.34), controlPoint2: CGPointMake(7.8, -16.16))
        path117Path.addCurveToPoint(CGPointMake(13.21, -16.07), controlPoint1: CGPointMake(7.8, -16.16), controlPoint2: CGPointMake(12.15, -15.05))
        path117Path.miterLimit = 4;

        path117Path.lineCapStyle = .Round;

        path117Path.lineJoinStyle = .Round;

        path117Path.usesEvenOddFillRule = true;

        color.setStroke()
        path117Path.lineWidth = 2
        path117Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawFlagIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 25.03, frame.minY + 24.91)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Path-214 Drawing
        let path214Path = UIBezierPath()
        path214Path.moveToPoint(CGPointMake(-6.36, 14.9))
        path214Path.addLineToPoint(CGPointMake(-9.71, -14.9))
        path214Path.miterLimit = 4;

        path214Path.lineCapStyle = .Round;

        path214Path.usesEvenOddFillRule = true;

        color.setStroke()
        path214Path.lineWidth = 2
        path214Path.stroke()


        //// Path-215 Drawing
        let path215Path = UIBezierPath()
        path215Path.moveToPoint(CGPointMake(-9.35, -11.76))
        path215Path.addCurveToPoint(CGPointMake(0.22, -10.4), controlPoint1: CGPointMake(-9.35, -11.76), controlPoint2: CGPointMake(-4.29, -9.57))
        path215Path.addCurveToPoint(CGPointMake(7.88, -14.26), controlPoint1: CGPointMake(4.73, -11.23), controlPoint2: CGPointMake(7.88, -14.26))
        path215Path.addCurveToPoint(CGPointMake(8.71, -13.9), controlPoint1: CGPointMake(8.29, -14.62), controlPoint2: CGPointMake(8.67, -14.46))
        path215Path.addLineToPoint(CGPointMake(9.7, -1.96))
        path215Path.addCurveToPoint(CGPointMake(9.03, -0.32), controlPoint1: CGPointMake(9.75, -1.41), controlPoint2: CGPointMake(9.44, -0.66))
        path215Path.addCurveToPoint(CGPointMake(1.57, 3.08), controlPoint1: CGPointMake(9.03, -0.32), controlPoint2: CGPointMake(6.39, 2.24))
        path215Path.addCurveToPoint(CGPointMake(-8.1, 2.17), controlPoint1: CGPointMake(-3.25, 3.92), controlPoint2: CGPointMake(-8.1, 2.17))
        path215Path.miterLimit = 4;

        path215Path.usesEvenOddFillRule = true;

        color.setStroke()
        path215Path.lineWidth = 2
        path215Path.stroke()


        //// Path-216 Drawing
        let path216Path = UIBezierPath()
        path216Path.moveToPoint(CGPointMake(-8.42, -6.84))
        path216Path.addCurveToPoint(CGPointMake(0.38, -5.48), controlPoint1: CGPointMake(-8.42, -6.84), controlPoint2: CGPointMake(-5.74, -4.77))
        path216Path.addCurveToPoint(CGPointMake(9.18, -9.78), controlPoint1: CGPointMake(6.5, -6.2), controlPoint2: CGPointMake(9.18, -9.78))
        path216Path.miterLimit = 4;

        path216Path.usesEvenOddFillRule = true;

        color.setStroke()
        path216Path.lineWidth = 2
        path216Path.stroke()


        //// Path-216-Copy Drawing
        let path216CopyPath = UIBezierPath()
        path216CopyPath.moveToPoint(CGPointMake(-8.42, -2.84))
        path216CopyPath.addCurveToPoint(CGPointMake(0.38, -1.48), controlPoint1: CGPointMake(-8.42, -2.84), controlPoint2: CGPointMake(-5.74, -0.77))
        path216CopyPath.addCurveToPoint(CGPointMake(9.18, -5.78), controlPoint1: CGPointMake(6.5, -2.2), controlPoint2: CGPointMake(9.18, -5.78))
        path216CopyPath.miterLimit = 4;

        path216CopyPath.usesEvenOddFillRule = true;

        color.setStroke()
        path216CopyPath.lineWidth = 2
        path216CopyPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawBackspaceIcon(frame frame: CGRect = CGRectMake(0, 0, 55, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.58013 * frame.width, frame.minY + 0.50000 * frame.height)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(5.78, -7.95))
        bezierPath.addLineToPoint(CGPointMake(-0, -2.12))
        bezierPath.addLineToPoint(CGPointMake(-5.78, -7.95))
        bezierPath.addCurveToPoint(CGPointMake(-7.89, -7.95), controlPoint1: CGPointMake(-6.37, -8.54), controlPoint2: CGPointMake(-7.31, -8.54))
        bezierPath.addCurveToPoint(CGPointMake(-7.89, -5.83), controlPoint1: CGPointMake(-8.48, -7.37), controlPoint2: CGPointMake(-8.47, -6.42))
        bezierPath.addLineToPoint(CGPointMake(-2.1, 0))
        bezierPath.addLineToPoint(CGPointMake(-7.89, 5.83))
        bezierPath.addCurveToPoint(CGPointMake(-7.89, 7.95), controlPoint1: CGPointMake(-8.47, 6.42), controlPoint2: CGPointMake(-8.47, 7.37))
        bezierPath.addCurveToPoint(CGPointMake(-5.78, 7.95), controlPoint1: CGPointMake(-7.31, 8.54), controlPoint2: CGPointMake(-6.37, 8.54))
        bezierPath.addLineToPoint(CGPointMake(-0, 2.12))
        bezierPath.addLineToPoint(CGPointMake(5.78, 7.95))
        bezierPath.addCurveToPoint(CGPointMake(7.89, 7.95), controlPoint1: CGPointMake(6.37, 8.54), controlPoint2: CGPointMake(7.31, 8.54))
        bezierPath.addCurveToPoint(CGPointMake(7.89, 5.83), controlPoint1: CGPointMake(8.48, 7.37), controlPoint2: CGPointMake(8.47, 6.42))
        bezierPath.addLineToPoint(CGPointMake(2.1, 0))
        bezierPath.addLineToPoint(CGPointMake(7.89, -5.83))
        bezierPath.addCurveToPoint(CGPointMake(7.89, -7.95), controlPoint1: CGPointMake(8.47, -6.42), controlPoint2: CGPointMake(8.47, -7.37))
        bezierPath.addCurveToPoint(CGPointMake(5.78, -7.95), controlPoint1: CGPointMake(7.31, -8.54), controlPoint2: CGPointMake(6.37, -8.54))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(20.09, -11.01))
        bezierPath.addLineToPoint(CGPointMake(20.09, 10.73))
        bezierPath.addCurveToPoint(CGPointMake(13.09, 17.72), controlPoint1: CGPointMake(20.09, 14.59), controlPoint2: CGPointMake(16.97, 17.72))
        bezierPath.addLineToPoint(CGPointMake(-8.91, 17.72))
        bezierPath.addCurveToPoint(CGPointMake(-14.18, 15.76), controlPoint1: CGPointMake(-10.56, 17.72), controlPoint2: CGPointMake(-12.92, 16.85))
        bezierPath.addLineToPoint(CGPointMake(-25.7, 5.87))
        bezierPath.addCurveToPoint(CGPointMake(-25.94, -4.81), controlPoint1: CGPointMake(-29.05, 3), controlPoint2: CGPointMake(-29.15, -1.79))
        bezierPath.addLineToPoint(CGPointMake(-14.09, -15.95))
        bezierPath.addCurveToPoint(CGPointMake(-8.91, -18), controlPoint1: CGPointMake(-12.88, -17.08), controlPoint2: CGPointMake(-10.57, -18))
        bezierPath.addLineToPoint(CGPointMake(13.09, -18))
        bezierPath.addCurveToPoint(CGPointMake(20.09, -11.01), controlPoint1: CGPointMake(16.96, -18), controlPoint2: CGPointMake(20.09, -14.86))
        bezierPath.closePath()
        highlightedColor.setFill()
        bezierPath.fill()



        CGContextRestoreGState(context)
    }

    public class func drawSmileyIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor10 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 25, frame.minY + 25)
        CGContextScaleCTM(context, emojiScale, emojiScale)



        //// Oval-77-Copy Drawing
        let oval77CopyPath = UIBezierPath(ovalInRect: CGRectMake(-17, -17, 34, 34))
        fillColor10.setFill()
        oval77CopyPath.fill()


        //// Path-594 Drawing
        let path594Path = UIBezierPath()
        path594Path.moveToPoint(CGPointMake(-9.44, 4.25))
        path594Path.addCurveToPoint(CGPointMake(0, 9.92), controlPoint1: CGPointMake(-9.44, 4.25), controlPoint2: CGPointMake(-7.08, 9.92))
        path594Path.addCurveToPoint(CGPointMake(9.44, 4.25), controlPoint1: CGPointMake(7.08, 9.92), controlPoint2: CGPointMake(9.44, 4.25))
        path594Path.miterLimit = 4;

        path594Path.lineCapStyle = .Round;

        path594Path.usesEvenOddFillRule = true;

        color.setStroke()
        path594Path.lineWidth = 5
        path594Path.stroke()


        //// Oval-370 Drawing
        let oval370Path = UIBezierPath(ovalInRect: CGRectMake(-10.39, -10.39, 6.61, 6.61))
        color.setFill()
        oval370Path.fill()


        //// Oval-370-Copy Drawing
        let oval370CopyPath = UIBezierPath(ovalInRect: CGRectMake(3.78, -10.39, 6.61, 6.61))
        color.setFill()
        oval370CopyPath.fill()



        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfBackspace(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawBackspace(color: color, keySize: keySize)

        let imageOfBackspace = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBackspace
    }

    public class func imageOfArrowup(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawArrowup(color: color, keySize: keySize)

        let imageOfArrowup = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfArrowup
    }

    public class func imageOfSearch(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSearch(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfSearch = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSearch
    }

    public class func imageOfArrowheadup(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, borderWidth: CGFloat = 2) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawArrowheadup(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale, borderWidth: borderWidth)

        let imageOfArrowheadup = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfArrowheadup
    }

    public class func imageOfShare(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawShare(color: color)

        let imageOfShare = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfShare
    }

    public class func imageOfClose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawClose(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfClose = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfClose
    }

    public class func imageOfButtonclose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawButtonclose(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfButtonclose = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfButtonclose
    }

    public class func imageOfFavorite(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false, favorited: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawFavorite(color: color, scale: scale, selected: selected, favorited: favorited)

        let imageOfFavorite = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFavorite
    }

    public class func imageOfFavoritedstate(frame frame: CGRect = CGRectMake(0, 0, 62, 62), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawFavoritedstate(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfFavoritedstate = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFavoritedstate
    }

    public class func imageOfRefresharrow(frame frame: CGRect = CGRectMake(4, 2, 22, 26), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawRefresharrow(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfRefresharrow = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfRefresharrow
    }

    public class func imageOfTrash(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawTrash(color: color, scale: scale, selected: selected)

        let imageOfTrash = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfTrash
    }

    public class func imageOfClipboard(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawClipboard(color: color, scale: scale, selected: selected)

        let imageOfClipboard = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfClipboard
    }

    public class func imageOfCheckmark(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawCheckmark(color: color, scale: scale, selected: selected)

        let imageOfCheckmark = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCheckmark
    }

    public class func imageOfCancel(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawCancel(color: color, scale: scale, selected: selected)

        let imageOfCancel = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCancel
    }

    public class func imageOfInsert(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawInsert(color: color, scale: scale, selected: selected)

        let imageOfInsert = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfInsert
    }

    public class func imageOfKeyboard(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawKeyboard(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfKeyboard = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfKeyboard
    }

    public class func imageOfUndo(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawUndo(color: color, scale: scale, selected: selected)

        let imageOfUndo = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfUndo
    }

    public class func imageOfClosebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawClosebutton(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfClosebutton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfClosebutton
    }

    public class func imageOfSearchbaricon(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSearchbaricon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfSearchbaricon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSearchbaricon
    }

    public class func imageOfSharebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSharebutton(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfSharebutton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSharebutton
    }

    public class func imageOfSettings(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawSettings(color: color, scale: scale, selected: selected)

        let imageOfSettings = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSettings
    }

    public class func imageOfTrending(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawTrending(color: color, scale: scale, selected: selected)

        let imageOfTrending = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfTrending
    }

    public class func imageOfProfile(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawProfile(color: color, scale: scale, selected: selected)

        let imageOfProfile = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfProfile
    }

    public class func imageOfGlobebutton(frame frame: CGRect = CGRectMake(0, 0, 35, 35), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawGlobebutton(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfGlobebutton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGlobebutton
    }

    public class func imageOfSearchtab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSearchtab(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfSearchtab = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSearchtab
    }

    public class func imageOfTrendingtab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawTrendingtab(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfTrendingtab = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfTrendingtab
    }

    public class func imageOfFavoritestab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false, favorited: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawFavoritestab(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale, selected: selected, favorited: favorited)

        let imageOfFavoritestab = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFavoritestab
    }

    public class func imageOfRecentstab(frame frame: CGRect = CGRectMake(18, 12, 50, 50), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawRecentstab(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfRecentstab = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfRecentstab
    }

    public class func imageOfBackarrow(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false, rotate: CGFloat = -90) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawBackarrow(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale, selected: selected, rotate: rotate)

        let imageOfBackarrow = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBackarrow
    }

    public class func imageOfHotness(scale scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(24, 30), false, 0)
            StyleKit.drawHotness(scale: scale)

        let imageOfHotness = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfHotness
    }

    public class func imageOfMenu(frame frame: CGRect = CGRectMake(0, 0, 35, 35), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawMenu(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfMenu = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfMenu
    }

    public class func imageOfCancelbutton(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawCancelbutton(color: color, scale: scale, selected: selected)

        let imageOfCancelbutton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCancelbutton
    }

    public class func imageOfInsertbutton(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawInsertbutton(color: color, scale: scale, selected: selected)

        let imageOfInsertbutton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfInsertbutton
    }

    public class func imageOfLyricsclosebutton(scale scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawLyricsclosebutton(scale: scale)

        let imageOfLyricsclosebutton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfLyricsclosebutton
    }

    public class func imageOfSnapchat(scale scale: CGFloat = 0.5, snapchatSelect: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawSnapchat(scale: scale, snapchatSelect: snapchatSelect)

        let imageOfSnapchat = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSnapchat
    }

    public class func imageOfEmojiSelectedIcon(frame frame: CGRect = CGRectMake(0, 0, 52, 52), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawEmojiSelectedIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), emojiScale: emojiScale)

        let imageOfEmojiSelectedIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfEmojiSelectedIcon
    }

    public class func imageOfAbcIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawAbcIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfAbcIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAbcIcon
    }

    public class func imageOfRecentIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawRecentIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfRecentIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfRecentIcon
    }

    public class func imageOfPeopleIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawPeopleIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfPeopleIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfPeopleIcon
    }

    public class func imageOfNatureIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawNatureIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfNatureIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfNatureIcon
    }

    public class func imageOfFoodIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawFoodIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfFoodIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFoodIcon
    }

    public class func imageOfConfettiIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawConfettiIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfConfettiIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfConfettiIcon
    }

    public class func imageOfActivityIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawActivityIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfActivityIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfActivityIcon
    }

    public class func imageOfBuildingsIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawBuildingsIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfBuildingsIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBuildingsIcon
    }

    public class func imageOfRandomIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawRandomIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfRandomIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfRandomIcon
    }

    public class func imageOfFlagIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawFlagIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfFlagIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFlagIcon
    }

    public class func imageOfBackspaceIcon(frame frame: CGRect = CGRectMake(0, 0, 55, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawBackspaceIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfBackspaceIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBackspaceIcon
    }

    public class func imageOfSmileyIcon(frame frame: CGRect = CGRectMake(0, 0, 50, 50), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), emojiScale: CGFloat = 1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSmileyIcon(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, emojiScale: emojiScale)

        let imageOfSmileyIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSmileyIcon
    }

}

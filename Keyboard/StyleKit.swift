//
//  StyleKit.swift
//  Often
//
//  Created by Luc Succes on 11/9/15.
//  Copyright (c) 2015 Project Surf Inc. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Drawing Methods

    public class func drawBackspace(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Frames
        let frame = CGRectMake(keySize.origin.x, keySize.origin.y, keySize.size.width, keySize.size.height)


        //// Icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.14286 * frame.width, frame.minY + 0.20000 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)

        CGContextSetBlendMode(context, .Multiply)
        CGContextBeginTransparencyLayer(context, nil)


        //// arrow-icon
        //// head Drawing
        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(22.95, 33.31))
        headPath.addLineToPoint(CGPointMake(9.75, 20.28))
        headPath.addLineToPoint(CGPointMake(22.6, 7.97))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()


        //// tail Drawing
        let tailPath = UIBezierPath()
        tailPath.moveToPoint(CGPointMake(9.71, 20.43))
        tailPath.addLineToPoint(CGPointMake(47.94, 20.4))
        tailPath.miterLimit = 4;

        tailPath.usesEvenOddFillRule = true;

        color.setStroke()
        tailPath.lineWidth = 3
        tailPath.stroke()




        //// Bar Drawing
        let barPath = UIBezierPath(rect: CGRectMake(0, 0, 3, 40))
        color.setFill()
        barPath.fill()


        CGContextEndTransparencyLayer(context)

        CGContextRestoreGState(context)
    }

    public class func drawArrowup(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Frames
        let frame = CGRectMake(keySize.origin.x, keySize.origin.y, keySize.size.width, keySize.size.height)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48571 * frame.width, frame.minY + 0.49335 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// head Drawing
        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(-12.67, -5.88))
        headPath.addLineToPoint(CGPointMake(0.36, -19.07))
        headPath.addLineToPoint(CGPointMake(12.67, -6.22))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()


        //// tail Drawing
        let tailPath = UIBezierPath()
        tailPath.moveToPoint(CGPointMake(0.21, -19.11))
        tailPath.addLineToPoint(CGPointMake(0.24, 19.11))
        tailPath.miterLimit = 4;

        tailPath.usesEvenOddFillRule = true;

        color.setStroke()
        tailPath.lineWidth = 3
        tailPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawSearch(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// search
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.57045 * frame.width, frame.minY + 0.58812 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Path-82 Drawing
        let path82Path = UIBezierPath()
        path82Path.moveToPoint(CGPointMake(1.45, 1.32))
        path82Path.addLineToPoint(CGPointMake(8.97, 10.58))
        path82Path.miterLimit = 4;

        path82Path.usesEvenOddFillRule = true;

        color.setStroke()
        path82Path.lineWidth = 3
        path82Path.stroke()


        //// Oval-77 Drawing
        let oval77Path = UIBezierPath(ovalInRect: CGRectMake(-13.97, -15.58, 19, 18))
        color.setStroke()
        oval77Path.lineWidth = 3
        oval77Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawArrowheadup(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), borderWidth: CGFloat = 2) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// head Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48860 * frame.width, frame.minY + 0.47676 * frame.height)

        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(-10.9, 5.31))
        headPath.addLineToPoint(CGPointMake(-0, -5.31))
        headPath.addLineToPoint(CGPointMake(10.9, 5.29))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = borderWidth
        headPath.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawShare(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// share
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.37612 * frame.width, frame.minY + 0.29439 * frame.height)
        CGContextScaleCTM(context, 0.5, 0.5)



        //// square Drawing
        let squarePath = UIBezierPath()
        squarePath.moveToPoint(CGPointMake(7.79, 15.53))
        squarePath.addLineToPoint(CGPointMake(15.39, 15.45))
        squarePath.addLineToPoint(CGPointMake(15.39, 30.11))
        squarePath.addLineToPoint(CGPointMake(0.73, 30.11))
        squarePath.addLineToPoint(CGPointMake(0.73, 15.45))
        squarePath.addLineToPoint(CGPointMake(7.79, 15.53))
        squarePath.closePath()
        squarePath.miterLimit = 4;

        squarePath.usesEvenOddFillRule = true;

        color.setStroke()
        squarePath.lineWidth = 3
        squarePath.stroke()


        //// line Drawing
        let linePath = UIBezierPath()
        linePath.moveToPoint(CGPointMake(8.08, 1.15))
        linePath.addLineToPoint(CGPointMake(8.01, 15.97))
        linePath.miterLimit = 4;

        linePath.usesEvenOddFillRule = true;

        color.setStroke()
        linePath.lineWidth = 3
        linePath.stroke()


        //// head Drawing
        let headPath = UIBezierPath()
        headPath.moveToPoint(CGPointMake(0, 8.08))
        headPath.addLineToPoint(CGPointMake(7.99, 0))
        headPath.addLineToPoint(CGPointMake(15.98, 8.07))
        headPath.miterLimit = 4;

        headPath.usesEvenOddFillRule = true;

        color.setStroke()
        headPath.lineWidth = 3
        headPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawClose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// close
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.48651 * frame.width, frame.minY + 0.48646 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// rightBar Drawing
        CGContextSaveGState(context)

        let rightBarPath = UIBezierPath()
        rightBarPath.moveToPoint(CGPointMake(15.97, -11.31))
        rightBarPath.addLineToPoint(CGPointMake(11.98, -15.08))
        rightBarPath.addLineToPoint(CGPointMake(-15.97, 11.31))
        rightBarPath.addLineToPoint(CGPointMake(-11.98, 15.08))
        rightBarPath.addLineToPoint(CGPointMake(15.97, -11.31))
        rightBarPath.addLineToPoint(CGPointMake(15.97, -11.31))
        rightBarPath.closePath()
        rightBarPath.miterLimit = 4;

        rightBarPath.usesEvenOddFillRule = true;

        color.setFill()
        rightBarPath.fill()

        CGContextRestoreGState(context)


        //// leftBar Drawing
        CGContextSaveGState(context)

        let leftBarPath = UIBezierPath()
        leftBarPath.moveToPoint(CGPointMake(-15.97, -11.31))
        leftBarPath.addLineToPoint(CGPointMake(-11.98, -15.08))
        leftBarPath.addLineToPoint(CGPointMake(15.97, 11.31))
        leftBarPath.addLineToPoint(CGPointMake(11.98, 15.08))
        leftBarPath.addLineToPoint(CGPointMake(-15.97, -11.31))
        leftBarPath.addLineToPoint(CGPointMake(-15.97, -11.31))
        leftBarPath.closePath()
        leftBarPath.miterLimit = 4;

        leftBarPath.usesEvenOddFillRule = true;

        color.setFill()
        leftBarPath.fill()

        CGContextRestoreGState(context)



        CGContextRestoreGState(context)
    }

    public class func drawButtonclose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// close 2
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.51429 * frame.width, frame.minY + 0.50159 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-406 Drawing
        let rectangle406Path = UIBezierPath()
        rectangle406Path.moveToPoint(CGPointMake(-7.99, -5.66))
        rectangle406Path.addLineToPoint(CGPointMake(-5.99, -7.54))
        rectangle406Path.addLineToPoint(CGPointMake(7.99, 5.66))
        rectangle406Path.addLineToPoint(CGPointMake(5.99, 7.54))
        rectangle406Path.addLineToPoint(CGPointMake(-7.99, -5.66))
        rectangle406Path.addLineToPoint(CGPointMake(-7.99, -5.66))
        rectangle406Path.closePath()
        rectangle406Path.miterLimit = 4;

        rectangle406Path.usesEvenOddFillRule = true;

        color.setFill()
        rectangle406Path.fill()


        //// Rectangle-407 Drawing
        let rectangle407Path = UIBezierPath()
        rectangle407Path.moveToPoint(CGPointMake(7.99, -5.66))
        rectangle407Path.addLineToPoint(CGPointMake(5.99, -7.54))
        rectangle407Path.addLineToPoint(CGPointMake(-7.99, 5.66))
        rectangle407Path.addLineToPoint(CGPointMake(-5.99, 7.54))
        rectangle407Path.addLineToPoint(CGPointMake(7.99, -5.66))
        rectangle407Path.addLineToPoint(CGPointMake(7.99, -5.66))
        rectangle407Path.closePath()
        rectangle407Path.miterLimit = 4;

        rectangle407Path.usesEvenOddFillRule = true;

        color.setFill()
        rectangle407Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawFavorite(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, -0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 11.5, frame.minY + 8, 80.5, 80.5))
        selectedFillColor.setFill()
        circlePath.fill()
        strokeColor.setStroke()
        circlePath.lineWidth = 3
        circlePath.stroke()


        //// star Drawing
        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(51.92, 54.5))
        starPath.addLineToPoint(CGPointMake(42.6, 61))
        starPath.addLineToPoint(CGPointMake(45.88, 50.11))
        starPath.addLineToPoint(CGPointMake(frame.minX + 36.83, frame.minY + 43.24))
        starPath.addLineToPoint(CGPointMake(frame.minX + 48.19, frame.minY + 43))
        starPath.addLineToPoint(CGPointMake(51.92, 32.26))
        starPath.addLineToPoint(CGPointMake(55.65, 43))
        starPath.addLineToPoint(CGPointMake(67, 43.24))
        starPath.addLineToPoint(CGPointMake(57.95, 50.11))
        starPath.addLineToPoint(CGPointMake(61.24, 61))
        starPath.addLineToPoint(CGPointMake(51.92, 54.5))
        starPath.closePath()
        starPath.miterLimit = 4;

        starPath.lineCapStyle = .Round;

        starPath.lineJoinStyle = .Round;

        starPath.usesEvenOddFillRule = true;

        selectedHighlightColor.setFill()
        starPath.fill()
        selectedHighlightColor.setStroke()
        starPath.lineWidth = 4
        starPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawFavoritedstate(frame frame: CGRect = CGRectMake(0, 0, 62, 62), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor = UIColor(red: 0.145, green: 0.780, blue: 0.530, alpha: 1.000)
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 62, frame.minY + 62)
        CGContextScaleCTM(context, scale, scale)



        //// triangle Drawing
        let trianglePath = UIBezierPath()
        trianglePath.moveToPoint(CGPointMake(0, -62))
        trianglePath.addLineToPoint(CGPointMake(-0, -0))
        trianglePath.addLineToPoint(CGPointMake(-62, 0))
        trianglePath.addLineToPoint(CGPointMake(0, -62))
        trianglePath.closePath()
        trianglePath.miterLimit = 4;

        trianglePath.usesEvenOddFillRule = true;

        fillColor.setFill()
        trianglePath.fill()


        //// star Drawing
        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(-18.75, -30.85))
        starPath.addLineToPoint(CGPointMake(-16.1, -23.19))
        starPath.addLineToPoint(CGPointMake(-8, -23.04))
        starPath.addLineToPoint(CGPointMake(-14.47, -18.16))
        starPath.addLineToPoint(CGPointMake(-12.11, -10.41))
        starPath.addLineToPoint(CGPointMake(-18.75, -15.05))
        starPath.addLineToPoint(CGPointMake(-25.39, -10.41))
        starPath.addLineToPoint(CGPointMake(-23.03, -18.16))
        starPath.addLineToPoint(CGPointMake(-29.5, -23.04))
        starPath.addLineToPoint(CGPointMake(-21.4, -23.19))
        starPath.closePath()
        fillColor2.setFill()
        starPath.fill()



        CGContextRestoreGState(context)
    }

    public class func drawRefresharrow(frame frame: CGRect = CGRectMake(4, 2, 22, 26), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// arrow
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.52273 * frame.width, frame.minY + 0.50962 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-1306 Drawing
        let rectangle1306Path = UIBezierPath(rect: CGRectMake(-2, -9.5, 4, 21))
        fillColor2.setFill()
        rectangle1306Path.fill()


        //// Path-319 Drawing
        let path319Path = UIBezierPath()
        path319Path.moveToPoint(CGPointMake(-9, -2.5))
        path319Path.addLineToPoint(CGPointMake(0, -11.5))
        path319Path.addLineToPoint(CGPointMake(9, -2.5))
        path319Path.miterLimit = 4;

        path319Path.usesEvenOddFillRule = true;

        strokeColor2.setStroke()
        path319Path.lineWidth = 4
        path319Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawTrash(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// delete
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 4)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// Path-924 Drawing
        let path924Path = UIBezierPath()
        path924Path.moveToPoint(CGPointMake(frame.minX + 25, frame.minY + 33.59))
        path924Path.addLineToPoint(CGPointMake(31.97, 60.62))
        path924Path.addLineToPoint(CGPointMake(52, 60.62))
        path924Path.addLineToPoint(CGPointMake(58, 33.59))
        path924Path.addLineToPoint(CGPointMake(frame.minX + 25, frame.minY + 33.59))
        path924Path.closePath()
        path924Path.miterLimit = 4;

        path924Path.lineCapStyle = .Round;

        path924Path.lineJoinStyle = .Round;

        path924Path.usesEvenOddFillRule = true;

        selectedFillColor.setFill()
        path924Path.fill()
        selectedHighlightColor.setStroke()
        path924Path.lineWidth = 4
        path924Path.stroke()


        //// Path-925 Drawing
        let path925Path = UIBezierPath()
        path925Path.moveToPoint(CGPointMake(frame.minX + 27, frame.minY + 25.5))
        path925Path.addLineToPoint(CGPointMake(55, 25.5))
        path925Path.miterLimit = 4;

        path925Path.lineCapStyle = .Round;

        path925Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path925Path.lineWidth = 4
        path925Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawClipboard(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// copy
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 4)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// Path-926 Drawing
        let path926Path = UIBezierPath()
        path926Path.moveToPoint(CGPointMake(52.48, 44.61))
        path926Path.addLineToPoint(CGPointMake(52.48, 28.39))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 42.46, frame.minY + 19), controlPoint1: CGPointMake(52.48, 28.39), controlPoint2: CGPointMake(frame.minX + 53.34, frame.minY + 19))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 32, frame.minY + 28.39), controlPoint1: CGPointMake(frame.minX + 31.57, frame.minY + 19), controlPoint2: CGPointMake(frame.minX + 32, frame.minY + 28.39))
        path926Path.addLineToPoint(CGPointMake(32, 56.56))
        path926Path.addCurveToPoint(CGPointMake(38.83, 63.38), controlPoint1: CGPointMake(32, 56.56), controlPoint2: CGPointMake(31.86, 63.38))
        path926Path.addCurveToPoint(CGPointMake(45.94, 56.56), controlPoint1: CGPointMake(45.8, 63.38), controlPoint2: CGPointMake(45.94, 56.56))
        path926Path.addLineToPoint(CGPointMake(frame.minX + 45.94, frame.minY + 31.8))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 42.46, frame.minY + 27.54), controlPoint1: CGPointMake(frame.minX + 45.94, frame.minY + 31.8), controlPoint2: CGPointMake(frame.minX + 46.51, frame.minY + 27.54))
        path926Path.addCurveToPoint(CGPointMake(frame.minX + 38.83, frame.minY + 31.8), controlPoint1: CGPointMake(frame.minX + 38.4, frame.minY + 27.54), controlPoint2: CGPointMake(frame.minX + 38.83, frame.minY + 31.8))
        path926Path.addLineToPoint(CGPointMake(38.83, 54.85))
        path926Path.miterLimit = 4;

        path926Path.lineCapStyle = .Round;

        path926Path.lineJoinStyle = .Round;

        path926Path.usesEvenOddFillRule = true;

        selectedFillColor.setFill()
        path926Path.fill()
        selectedHighlightColor.setStroke()
        path926Path.lineWidth = 4
        path926Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawCheckmark(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(-1.5, -1.5, 50, 50)


        //// shape
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 5.75, 4.75)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        circlePath.fill()
        strokeColor.setStroke()
        circlePath.lineWidth = 3
        circlePath.stroke()


        //// check Drawing
        let checkPath = UIBezierPath()
        checkPath.moveToPoint(CGPointMake(frame.minX + 25, frame.minY + 43))
        checkPath.addLineToPoint(CGPointMake(35.5, 53.5))
        checkPath.addLineToPoint(CGPointMake(58.5, 27.5))
        checkPath.miterLimit = 4;

        checkPath.lineCapStyle = .Round;

        checkPath.lineJoinStyle = .Round;

        checkPath.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        checkPath.lineWidth = 4
        checkPath.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawCancel(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 4)
        CGContextScaleCTM(context, scale, scale)



        //// circle Drawing
        let circlePath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        circlePath.fill()
        strokeColor.setStroke()
        circlePath.lineWidth = 3
        circlePath.stroke()


        //// cancelIcon Drawing
        let cancelIconPath = UIBezierPath()
        cancelIconPath.moveToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 38.67))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 31.6, frame.minY + 28.77))
        cancelIconPath.addCurveToPoint(CGPointMake(frame.minX + 28.77, frame.minY + 28.77), controlPoint1: CGPointMake(frame.minX + 30.82, frame.minY + 27.99), controlPoint2: CGPointMake(frame.minX + 29.55, frame.minY + 27.99))
        cancelIconPath.addCurveToPoint(CGPointMake(frame.minX + 28.77, frame.minY + 31.6), controlPoint1: CGPointMake(frame.minX + 27.99, frame.minY + 29.56), controlPoint2: CGPointMake(frame.minX + 27.99, frame.minY + 30.82))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 38.67, frame.minY + 41.5))
        cancelIconPath.addLineToPoint(CGPointMake(28.77, 51.4))
        cancelIconPath.addCurveToPoint(CGPointMake(28.77, 54.23), controlPoint1: CGPointMake(27.99, 52.18), controlPoint2: CGPointMake(27.99, 53.44))
        cancelIconPath.addCurveToPoint(CGPointMake(31.6, 54.23), controlPoint1: CGPointMake(29.55, 55.01), controlPoint2: CGPointMake(30.82, 55.01))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 44.33))
        cancelIconPath.addLineToPoint(CGPointMake(51.4, 54.23))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 54.23), controlPoint1: CGPointMake(52.18, 55.01), controlPoint2: CGPointMake(53.45, 55.01))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 51.4), controlPoint1: CGPointMake(55.01, 53.44), controlPoint2: CGPointMake(55.01, 52.18))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 44.33, frame.minY + 41.5))
        cancelIconPath.addLineToPoint(CGPointMake(54.23, 31.6))
        cancelIconPath.addCurveToPoint(CGPointMake(54.23, 28.77), controlPoint1: CGPointMake(55.01, 30.82), controlPoint2: CGPointMake(55.01, 29.56))
        cancelIconPath.addCurveToPoint(CGPointMake(51.4, 28.77), controlPoint1: CGPointMake(53.45, 27.99), controlPoint2: CGPointMake(52.18, 27.99))
        cancelIconPath.addLineToPoint(CGPointMake(frame.minX + 41.5, frame.minY + 38.67))
        cancelIconPath.closePath()
        cancelIconPath.miterLimit = 4;

        cancelIconPath.usesEvenOddFillRule = true;

        selectedHighlightColor.setFill()
        cancelIconPath.fill()



        CGContextRestoreGState(context)
    }

    public class func drawInsert(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// Frames
        let frame = CGRectMake(0, 0, 50, 50)


        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4, 5)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + 1.5, frame.minY + 1.5, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// path-1 Drawing
        let path1Path = UIBezierPath()
        path1Path.moveToPoint(CGPointMake(frame.minX + 30.71, frame.minY + 40.93))
        path1Path.addLineToPoint(CGPointMake(frame.minX + 41.52, frame.minY + 29.93))
        path1Path.addLineToPoint(CGPointMake(51.73, 40.64))
        path1Path.miterLimit = 4;

        path1Path.lineCapStyle = .Round;

        path1Path.lineJoinStyle = .Round;

        path1Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path1Path.lineWidth = 4
        path1Path.stroke()


        //// Path- 2 Drawing
        let path2Path = UIBezierPath()
        path2Path.moveToPoint(CGPointMake(frame.minX + 41.39, frame.minY + 29.89))
        path2Path.addLineToPoint(CGPointMake(41.41, 61.61))
        path2Path.miterLimit = 4;

        path2Path.lineCapStyle = .Round;

        path2Path.lineJoinStyle = .Round;

        path2Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path2Path.lineWidth = 4
        path2Path.stroke()


        //// Path-106 Drawing
        let path106Path = UIBezierPath()
        path106Path.moveToPoint(CGPointMake(frame.minX + 29, frame.minY + 23))
        path106Path.addLineToPoint(CGPointMake(54, 23))
        path106Path.miterLimit = 4;

        path106Path.lineCapStyle = .Round;

        path106Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path106Path.lineWidth = 4
        path106Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawKeyboard(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 0.50143 * frame.width, frame.minY + 0.48750 * frame.height)
        CGContextScaleCTM(context, scale, scale)



        //// Rectangle-387 Drawing
        let rectangle387Path = UIBezierPath()
        rectangle387Path.moveToPoint(CGPointMake(-23.1, 6.7))
        rectangle387Path.addCurveToPoint(CGPointMake(-24.1, 7.7), controlPoint1: CGPointMake(-23.65, 6.7), controlPoint2: CGPointMake(-24.1, 7.15))
        rectangle387Path.addLineToPoint(CGPointMake(-24.1, 12.35))
        rectangle387Path.addCurveToPoint(CGPointMake(-23.1, 13.35), controlPoint1: CGPointMake(-24.1, 12.9), controlPoint2: CGPointMake(-23.65, 13.35))
        rectangle387Path.addLineToPoint(CGPointMake(22.9, 13.35))
        rectangle387Path.addCurveToPoint(CGPointMake(23.9, 12.35), controlPoint1: CGPointMake(23.45, 13.35), controlPoint2: CGPointMake(23.9, 12.9))
        rectangle387Path.addLineToPoint(CGPointMake(23.9, 7.7))
        rectangle387Path.addCurveToPoint(CGPointMake(22.9, 6.7), controlPoint1: CGPointMake(23.9, 7.15), controlPoint2: CGPointMake(23.45, 6.7))
        rectangle387Path.addLineToPoint(CGPointMake(-23.1, 6.7))
        rectangle387Path.closePath()
        rectangle387Path.miterLimit = 4;

        rectangle387Path.usesEvenOddFillRule = true;

        color.setFill()
        rectangle387Path.fill()


        //// Rectangle-340 Drawing
        let rectangle340Path = UIBezierPath()
        rectangle340Path.moveToPoint(CGPointMake(-23.1, -3.33))
        rectangle340Path.addCurveToPoint(CGPointMake(-24.1, -2.33), controlPoint1: CGPointMake(-23.65, -3.33), controlPoint2: CGPointMake(-24.1, -2.88))
        rectangle340Path.addLineToPoint(CGPointMake(-24.1, 2.32))
        rectangle340Path.addCurveToPoint(CGPointMake(-23.1, 3.32), controlPoint1: CGPointMake(-24.1, 2.87), controlPoint2: CGPointMake(-23.65, 3.32))
        rectangle340Path.addLineToPoint(CGPointMake(-18.59, 3.32))
        rectangle340Path.addCurveToPoint(CGPointMake(-17.59, 2.32), controlPoint1: CGPointMake(-18.04, 3.32), controlPoint2: CGPointMake(-17.59, 2.87))
        rectangle340Path.addLineToPoint(CGPointMake(-17.59, -2.33))
        rectangle340Path.addCurveToPoint(CGPointMake(-18.59, -3.33), controlPoint1: CGPointMake(-17.59, -2.88), controlPoint2: CGPointMake(-18.04, -3.33))
        rectangle340Path.addLineToPoint(CGPointMake(-23.1, -3.33))
        rectangle340Path.closePath()
        rectangle340Path.miterLimit = 4;

        rectangle340Path.usesEvenOddFillRule = true;

        color.setFill()
        rectangle340Path.fill()


        //// Rectangle-340-Copy Drawing
        let rectangle340CopyPath = UIBezierPath(roundedRect: CGRectMake(-13.65, -3.33, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340CopyPath.fill()


        //// Rectangle-340-Copy-2 Drawing
        let rectangle340Copy2Path = UIBezierPath(roundedRect: CGRectMake(-3.25, -3.33, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy2Path.fill()


        //// Rectangle-340-Copy-3 Drawing
        let rectangle340Copy3Path = UIBezierPath(roundedRect: CGRectMake(7.2, -3.33, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy3Path.fill()


        //// Rectangle-340-Copy-8 Drawing
        let rectangle340Copy8Path = UIBezierPath(roundedRect: CGRectMake(16.95, -3.33, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy8Path.fill()


        //// Rectangle-340-Copy-7 Drawing
        let rectangle340Copy7Path = UIBezierPath(roundedRect: CGRectMake(-18.9, -13.18, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy7Path.fill()


        //// Rectangle-340-Copy-6 Drawing
        let rectangle340Copy6Path = UIBezierPath(roundedRect: CGRectMake(-8.45, -13.18, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy6Path.fill()


        //// Rectangle-340-Copy-5 Drawing
        let rectangle340Copy5Path = UIBezierPath(roundedRect: CGRectMake(1.95, -13.18, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy5Path.fill()


        //// Rectangle-340-Copy-4 Drawing
        let rectangle340Copy4Path = UIBezierPath(roundedRect: CGRectMake(12.4, -13.18, 6.5, 6.65), cornerRadius: 1)
        color.setFill()
        rectangle340Copy4Path.fill()



        CGContextRestoreGState(context)
    }

    public class func drawUndo(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        var colorHueComponent: CGFloat = 1,
            colorSaturationComponent: CGFloat = 1,
            colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let highlightedColor = UIColor(hue: 0.449, saturation: colorSaturationComponent, brightness: colorBrightnessComponent, alpha: CGColorGetAlpha(color.CGColor))
        let noneColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.000)

        //// Variable Declarations
        let selectedFillColor = selected ? highlightedColor : noneColor
        let selectedHighlightColor = selected ? UIColor(red: 1, green: 1, blue: 1, alpha: 1) : color
        let strokeColor = selected ? highlightedColor : color

        //// icon
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 5.5, 4.5)
        CGContextScaleCTM(context, scale, scale)



        //// Oval-86 Drawing
        let oval86Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 80.5, 80.5))
        selectedFillColor.setFill()
        oval86Path.fill()
        strokeColor.setStroke()
        oval86Path.lineWidth = 3
        oval86Path.stroke()


        //// Path-931 Drawing
        let path931Path = UIBezierPath()
        path931Path.moveToPoint(CGPointMake(28.25, 26.64))
        path931Path.addLineToPoint(CGPointMake(18.89, 36.12))
        path931Path.addLineToPoint(CGPointMake(28.25, 44.36))
        path931Path.miterLimit = 4;

        path931Path.lineCapStyle = .Round;

        path931Path.lineJoinStyle = .Round;

        path931Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path931Path.lineWidth = 4
        path931Path.stroke()


        //// Path-145 Drawing
        let path145Path = UIBezierPath()
        path145Path.moveToPoint(CGPointMake(42.5, 51.5))
        path145Path.addLineToPoint(CGPointMake(54.5, 51.5))
        path145Path.addCurveToPoint(CGPointMake(62.5, 43.5), controlPoint1: CGPointMake(54.5, 51.5), controlPoint2: CGPointMake(62.5, 51.21))
        path145Path.addCurveToPoint(CGPointMake(54.5, 35.5), controlPoint1: CGPointMake(62.5, 35.79), controlPoint2: CGPointMake(54.5, 35.5))
        path145Path.addLineToPoint(CGPointMake(19.5, 35.5))
        path145Path.miterLimit = 4;

        path145Path.lineCapStyle = .Round;

        path145Path.lineJoinStyle = .Round;

        path145Path.usesEvenOddFillRule = true;

        selectedHighlightColor.setStroke()
        path145Path.lineWidth = 4
        path145Path.stroke()



        CGContextRestoreGState(context)
    }

    public class func drawUser(frame frame: CGRect = CGRectMake(5, 6, 30, 30), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)) {


        //// Subframes
        let userprofile: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.26769 + 0.47) + 0.03, frame.minY + floor(frame.height * 0.13694 + 0.5), floor(frame.width * 0.73778 + 0.37) - floor(frame.width * 0.26769 + 0.47) + 0.1, floor(frame.height * 0.86667 - 0.39) - floor(frame.height * 0.13694 + 0.5) + 0.89)


        //// user-profile
        //// Oval-17 Drawing
        let oval17Path = UIBezierPath(ovalInRect: CGRectMake(userprofile.minX + floor(userprofile.width * 0.10573 + 0.01) + 0.49, userprofile.minY + floor(userprofile.height * 0.00000 + 0.45) + 0.05, floor(userprofile.width * 0.87493 + 0.16) - floor(userprofile.width * 0.10573 + 0.01) - 0.15, floor(userprofile.height * 0.49506 - 0.39) - floor(userprofile.height * 0.00000 + 0.45) + 0.84))
        color.setFill()
        oval17Path.fill()
        color.setStroke()
        oval17Path.lineWidth = 1
        oval17Path.stroke()


        //// Path-18 Drawing
        let path18Path = UIBezierPath()
        path18Path.moveToPoint(CGPointMake(userprofile.minX + 0.50000 * userprofile.width, userprofile.minY + 1.00000 * userprofile.height))
        path18Path.addCurveToPoint(CGPointMake(userprofile.minX + 0.00000 * userprofile.width, userprofile.minY + 0.90612 * userprofile.height), controlPoint1: CGPointMake(userprofile.minX + 0.16067 * userprofile.width, userprofile.minY + 1.00000 * userprofile.height), controlPoint2: CGPointMake(userprofile.minX + 0.00000 * userprofile.width, userprofile.minY + 0.90612 * userprofile.height))
        path18Path.addCurveToPoint(CGPointMake(userprofile.minX + 0.50000 * userprofile.width, userprofile.minY + 0.62945 * userprofile.height), controlPoint1: CGPointMake(userprofile.minX + 0.00000 * userprofile.width, userprofile.minY + 0.90612 * userprofile.height), controlPoint2: CGPointMake(userprofile.minX + 0.06114 * userprofile.width, userprofile.minY + 0.62945 * userprofile.height))
        path18Path.addCurveToPoint(CGPointMake(userprofile.minX + 1.00000 * userprofile.width, userprofile.minY + 0.90612 * userprofile.height), controlPoint1: CGPointMake(userprofile.minX + 0.93886 * userprofile.width, userprofile.minY + 0.62945 * userprofile.height), controlPoint2: CGPointMake(userprofile.minX + 1.00000 * userprofile.width, userprofile.minY + 0.90612 * userprofile.height))
        path18Path.addCurveToPoint(CGPointMake(userprofile.minX + 0.50000 * userprofile.width, userprofile.minY + 1.00000 * userprofile.height), controlPoint1: CGPointMake(userprofile.minX + 1.00000 * userprofile.width, userprofile.minY + 0.90612 * userprofile.height), controlPoint2: CGPointMake(userprofile.minX + 0.83933 * userprofile.width, userprofile.minY + 1.00000 * userprofile.height))
        path18Path.closePath()
        path18Path.miterLimit = 4;

        path18Path.usesEvenOddFillRule = true;

        color.setFill()
        path18Path.fill()
        color.setStroke()
        path18Path.lineWidth = 1
        path18Path.stroke()
    }

    public class func drawSettings(frame frame: CGRect = CGRectMake(0, 0, 40, 40), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)) {

        //// wheel Drawing
        let wheelPath = UIBezierPath()
        wheelPath.moveToPoint(CGPointMake(frame.minX + 0.37849 * frame.width, frame.minY + 0.78999 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.92500 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.62056 * frame.width, frame.minY + 0.79105 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.80052 * frame.width, frame.minY + 0.80052 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.79097 * frame.width, frame.minY + 0.61913 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.92500 * frame.width, frame.minY + 0.50000 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.78991 * frame.width, frame.minY + 0.37992 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.80052 * frame.width, frame.minY + 0.19948 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.62151 * frame.width, frame.minY + 0.21001 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.07500 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.37944 * frame.width, frame.minY + 0.20895 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.19948 * frame.width, frame.minY + 0.19948 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.20903 * frame.width, frame.minY + 0.38087 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.07500 * frame.width, frame.minY + 0.50000 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.21009 * frame.width, frame.minY + 0.62008 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.19948 * frame.width, frame.minY + 0.80052 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.37849 * frame.width, frame.minY + 0.78999 * frame.height))
        wheelPath.addLineToPoint(CGPointMake(frame.minX + 0.37849 * frame.width, frame.minY + 0.78999 * frame.height))
        wheelPath.closePath()
        wheelPath.moveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.62750 * frame.height))
        wheelPath.addCurveToPoint(CGPointMake(frame.minX + 0.62750 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.57042 * frame.width, frame.minY + 0.62750 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.62750 * frame.width, frame.minY + 0.57042 * frame.height))
        wheelPath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.37250 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.62750 * frame.width, frame.minY + 0.42958 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.57042 * frame.width, frame.minY + 0.37250 * frame.height))
        wheelPath.addCurveToPoint(CGPointMake(frame.minX + 0.37250 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.42958 * frame.width, frame.minY + 0.37250 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.37250 * frame.width, frame.minY + 0.42958 * frame.height))
        wheelPath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.62750 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.37250 * frame.width, frame.minY + 0.57042 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.42958 * frame.width, frame.minY + 0.62750 * frame.height))
        wheelPath.closePath()
        wheelPath.miterLimit = 4;

        wheelPath.usesEvenOddFillRule = true;

        color.setFill()
        wheelPath.fill()
    }

    //// Generated Images

    public class func imageOfBackspace(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawBackspace(color: color, keySize: keySize)

        let imageOfBackspace = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBackspace
    }

    public class func imageOfArrowup(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), keySize: CGRect = CGRectMake(0, 0, 35, 35)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 35), false, 0)
            StyleKit.drawArrowup(color: color, keySize: keySize)

        let imageOfArrowup = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfArrowup
    }

    public class func imageOfSearch(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSearch(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfSearch = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSearch
    }

    public class func imageOfArrowheadup(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), borderWidth: CGFloat = 2) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawArrowheadup(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, borderWidth: borderWidth)

        let imageOfArrowheadup = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfArrowheadup
    }

    public class func imageOfShare(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawShare(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color)

        let imageOfShare = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfShare
    }

    public class func imageOfClose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawClose(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfClose = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfClose
    }

    public class func imageOfButtonclose(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawButtonclose(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfButtonclose = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfButtonclose
    }

    public class func imageOfFavorite(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawFavorite(color: color, scale: scale, selected: selected)

        let imageOfFavorite = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFavorite
    }

    public class func imageOfFavoritedstate(frame frame: CGRect = CGRectMake(0, 0, 62, 62), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawFavoritedstate(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfFavoritedstate = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfFavoritedstate
    }

    public class func imageOfRefresharrow(frame frame: CGRect = CGRectMake(4, 2, 22, 26), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawRefresharrow(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), scale: scale)

        let imageOfRefresharrow = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfRefresharrow
    }

    public class func imageOfTrash(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawTrash(color: color, scale: scale, selected: selected)

        let imageOfTrash = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfTrash
    }

    public class func imageOfClipboard(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawClipboard(color: color, scale: scale, selected: selected)

        let imageOfClipboard = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfClipboard
    }

    public class func imageOfCheckmark(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawCheckmark(color: color, scale: scale, selected: selected)

        let imageOfCheckmark = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCheckmark
    }

    public class func imageOfCancel(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawCancel(color: color, scale: scale, selected: selected)

        let imageOfCancel = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCancel
    }

    public class func imageOfInsert(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawInsert(color: color, scale: scale, selected: selected)

        let imageOfInsert = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfInsert
    }

    public class func imageOfKeyboard(frame frame: CGRect = CGRectMake(0, 0, 35, 35), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawKeyboard(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color, scale: scale)

        let imageOfKeyboard = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfKeyboard
    }

    public class func imageOfUndo(color color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000), scale: CGFloat = 0.5, selected: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), false, 0)
            StyleKit.drawUndo(color: color, scale: scale, selected: selected)

        let imageOfUndo = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfUndo
    }

    public class func imageOfUser(frame frame: CGRect = CGRectMake(5, 6, 30, 30), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawUser(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color)

        let imageOfUser = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfUser
    }

    public class func imageOfSettings(frame frame: CGRect = CGRectMake(0, 0, 40, 40), color: UIColor = UIColor(red: 0.095, green: 0.095, blue: 0.095, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKit.drawSettings(frame: CGRectMake(0, 0, frame.size.width, frame.size.height), color: color)

        let imageOfSettings = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSettings
    }

}
